
StopWatchAPP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002734  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00800060  00002734  000027c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800182  00800182  000028ea  2**0
                  ALLOC
  3 .stab         00002400  00000000  00000000  000028ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000144f  00000000  00000000  00004cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000613b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000627b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000063eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008034  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a0b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a887  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 86 12 	jmp	0x250c	; 0x250c <__vector_10>
      2c:	0c 94 3a 12 	jmp	0x2474	; 0x2474 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 39       	cpi	r26, 0x9D	; 157
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b8 07 	call	0xf70	; 0xf70 <main>
      8a:	0c 94 98 13 	jmp	0x2730	; 0x2730 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 61 13 	jmp	0x26c2	; 0x26c2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 eb       	ldi	r26, 0xB1	; 177
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6d 13 	jmp	0x26da	; 0x26da <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6d 13 	jmp	0x26da	; 0x26da <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 61 13 	jmp	0x26c2	; 0x26c2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 eb       	ldi	r24, 0xB1	; 177
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6d 13 	jmp	0x26da	; 0x26da <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6d 13 	jmp	0x26da	; 0x26da <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6d 13 	jmp	0x26da	; 0x26da <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TOGGLE>:
static u32 global_u32_num1=0;      //Num1 represent minutes
static u32 global_u32_num2=0;	   //Num2 represent seconds

/*---------------------------------------------------------------------------------------------------------------------*/
void TOGGLE(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	static u8 static_u8_LED_Value  =0;
	static_u8_LED_Value^=1;
     b4e:	90 91 93 01 	lds	r25, 0x0193
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	89 27       	eor	r24, r25
     b56:	80 93 93 01 	sts	0x0193, r24
	MDIO_VoidSetPinValue(DIO_U8_PORTA,DIO_U8_PIN7,static_u8_LED_Value);
     b5a:	90 91 93 01 	lds	r25, 0x0193
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	67 e0       	ldi	r22, 0x07	; 7
     b62:	49 2f       	mov	r20, r25
     b64:	0e 94 78 09 	call	0x12f0	; 0x12f0 <MDIO_VoidSetPinValue>
}
     b68:	cf 91       	pop	r28
     b6a:	df 91       	pop	r29
     b6c:	08 95       	ret

00000b6e <APPCALCULATOR_u8_CheckNum>:
/*---------------------------------------------------------------------------------------------------------------------*/

u8 APPCALCULATOR_u8_CheckNum(u8 copy_u8_keypad_OutputCharacter)
{
     b6e:	df 93       	push	r29
     b70:	cf 93       	push	r28
     b72:	00 d0       	rcall	.+0      	; 0xb74 <APPCALCULATOR_u8_CheckNum+0x6>
     b74:	0f 92       	push	r0
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
     b7a:	8b 83       	std	Y+3, r24	; 0x03
	u8 local_u8_CheckValue='o',local_u8_CharToInt = (copy_u8_keypad_OutputCharacter-48);
     b7c:	8f e6       	ldi	r24, 0x6F	; 111
     b7e:	8a 83       	std	Y+2, r24	; 0x02
     b80:	8b 81       	ldd	r24, Y+3	; 0x03
     b82:	80 53       	subi	r24, 0x30	; 48
     b84:	89 83       	std	Y+1, r24	; 0x01

	if(local_u8_CharToInt >= 0  && local_u8_CharToInt < 10)
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	8a 30       	cpi	r24, 0x0A	; 10
     b8a:	10 f4       	brcc	.+4      	; 0xb90 <APPCALCULATOR_u8_CheckNum+0x22>
	{
		local_u8_CheckValue='n';
     b8c:	8e e6       	ldi	r24, 0x6E	; 110
     b8e:	8a 83       	std	Y+2, r24	; 0x02
	}
	return local_u8_CheckValue ;
     b90:	8a 81       	ldd	r24, Y+2	; 0x02
}
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	08 95       	ret

00000b9e <APPCALCULATOR_u8_CreatNum>:
/*---------------------------------------------------------------------------------------------------------------------*/
void APPCALCULATOR_u8_CreatNum(u32 *ptr,u8 digit)
{
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	00 d0       	rcall	.+0      	; 0xba4 <APPCALCULATOR_u8_CreatNum+0x6>
     ba4:	0f 92       	push	r0
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
     baa:	9a 83       	std	Y+2, r25	; 0x02
     bac:	89 83       	std	Y+1, r24	; 0x01
     bae:	6b 83       	std	Y+3, r22	; 0x03
	*ptr= (*ptr) * 10 + (u32)(digit-48);
     bb0:	e9 81       	ldd	r30, Y+1	; 0x01
     bb2:	fa 81       	ldd	r31, Y+2	; 0x02
     bb4:	80 81       	ld	r24, Z
     bb6:	91 81       	ldd	r25, Z+1	; 0x01
     bb8:	a2 81       	ldd	r26, Z+2	; 0x02
     bba:	b3 81       	ldd	r27, Z+3	; 0x03
     bbc:	2a e0       	ldi	r18, 0x0A	; 10
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	40 e0       	ldi	r20, 0x00	; 0
     bc2:	50 e0       	ldi	r21, 0x00	; 0
     bc4:	bc 01       	movw	r22, r24
     bc6:	cd 01       	movw	r24, r26
     bc8:	0e 94 20 13 	call	0x2640	; 0x2640 <__mulsi3>
     bcc:	9b 01       	movw	r18, r22
     bce:	ac 01       	movw	r20, r24
     bd0:	8b 81       	ldd	r24, Y+3	; 0x03
     bd2:	88 2f       	mov	r24, r24
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	c0 97       	sbiw	r24, 0x30	; 48
     bd8:	aa 27       	eor	r26, r26
     bda:	97 fd       	sbrc	r25, 7
     bdc:	a0 95       	com	r26
     bde:	ba 2f       	mov	r27, r26
     be0:	82 0f       	add	r24, r18
     be2:	93 1f       	adc	r25, r19
     be4:	a4 1f       	adc	r26, r20
     be6:	b5 1f       	adc	r27, r21
     be8:	e9 81       	ldd	r30, Y+1	; 0x01
     bea:	fa 81       	ldd	r31, Y+2	; 0x02
     bec:	80 83       	st	Z, r24
     bee:	91 83       	std	Z+1, r25	; 0x01
     bf0:	a2 83       	std	Z+2, r26	; 0x02
     bf2:	b3 83       	std	Z+3, r27	; 0x03
}
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
     bf8:	0f 90       	pop	r0
     bfa:	cf 91       	pop	r28
     bfc:	df 91       	pop	r29
     bfe:	08 95       	ret

00000c00 <SetGlobalSecCounterMinCounter>:
/*---------------------------------------------------------------------------------------------------------------------*/
void SetGlobalSecCounterMinCounter(u32 minutes,u32 seconds)
{
     c00:	df 93       	push	r29
     c02:	cf 93       	push	r28
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
     c08:	28 97       	sbiw	r28, 0x08	; 8
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	f8 94       	cli
     c0e:	de bf       	out	0x3e, r29	; 62
     c10:	0f be       	out	0x3f, r0	; 63
     c12:	cd bf       	out	0x3d, r28	; 61
     c14:	69 83       	std	Y+1, r22	; 0x01
     c16:	7a 83       	std	Y+2, r23	; 0x02
     c18:	8b 83       	std	Y+3, r24	; 0x03
     c1a:	9c 83       	std	Y+4, r25	; 0x04
     c1c:	2d 83       	std	Y+5, r18	; 0x05
     c1e:	3e 83       	std	Y+6, r19	; 0x06
     c20:	4f 83       	std	Y+7, r20	; 0x07
     c22:	58 87       	std	Y+8, r21	; 0x08
	global_u8_MinCounter = minutes + (seconds/60);
     c24:	8d 81       	ldd	r24, Y+5	; 0x05
     c26:	9e 81       	ldd	r25, Y+6	; 0x06
     c28:	af 81       	ldd	r26, Y+7	; 0x07
     c2a:	b8 85       	ldd	r27, Y+8	; 0x08
     c2c:	2c e3       	ldi	r18, 0x3C	; 60
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	40 e0       	ldi	r20, 0x00	; 0
     c32:	50 e0       	ldi	r21, 0x00	; 0
     c34:	bc 01       	movw	r22, r24
     c36:	cd 01       	movw	r24, r26
     c38:	0e 94 3f 13 	call	0x267e	; 0x267e <__udivmodsi4>
     c3c:	da 01       	movw	r26, r20
     c3e:	c9 01       	movw	r24, r18
     c40:	9c 01       	movw	r18, r24
     c42:	ad 01       	movw	r20, r26
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	9a 81       	ldd	r25, Y+2	; 0x02
     c48:	ab 81       	ldd	r26, Y+3	; 0x03
     c4a:	bc 81       	ldd	r27, Y+4	; 0x04
     c4c:	82 0f       	add	r24, r18
     c4e:	93 1f       	adc	r25, r19
     c50:	a4 1f       	adc	r26, r20
     c52:	b5 1f       	adc	r27, r21
     c54:	80 93 87 01 	sts	0x0187, r24
     c58:	90 93 88 01 	sts	0x0188, r25
     c5c:	a0 93 89 01 	sts	0x0189, r26
     c60:	b0 93 8a 01 	sts	0x018A, r27
	global_u8_SecCounter= (seconds%60)+1 ;
     c64:	8d 81       	ldd	r24, Y+5	; 0x05
     c66:	9e 81       	ldd	r25, Y+6	; 0x06
     c68:	af 81       	ldd	r26, Y+7	; 0x07
     c6a:	b8 85       	ldd	r27, Y+8	; 0x08
     c6c:	2c e3       	ldi	r18, 0x3C	; 60
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	40 e0       	ldi	r20, 0x00	; 0
     c72:	50 e0       	ldi	r21, 0x00	; 0
     c74:	bc 01       	movw	r22, r24
     c76:	cd 01       	movw	r24, r26
     c78:	0e 94 3f 13 	call	0x267e	; 0x267e <__udivmodsi4>
     c7c:	dc 01       	movw	r26, r24
     c7e:	cb 01       	movw	r24, r22
     c80:	01 96       	adiw	r24, 0x01	; 1
     c82:	a1 1d       	adc	r26, r1
     c84:	b1 1d       	adc	r27, r1
     c86:	80 93 83 01 	sts	0x0183, r24
     c8a:	90 93 84 01 	sts	0x0184, r25
     c8e:	a0 93 85 01 	sts	0x0185, r26
     c92:	b0 93 86 01 	sts	0x0186, r27
}
     c96:	28 96       	adiw	r28, 0x08	; 8
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	cf 91       	pop	r28
     ca4:	df 91       	pop	r29
     ca6:	08 95       	ret

00000ca8 <StopWatch>:
/*---------------------------------------------------------------------------------------------------------------------*/

void StopWatch(void)
{
     ca8:	df 93       	push	r29
     caa:	cf 93       	push	r28
     cac:	0f 92       	push	r0
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
	if(global_u8_program_flag==1)
     cb2:	80 91 82 01 	lds	r24, 0x0182
     cb6:	81 30       	cpi	r24, 0x01	; 1
     cb8:	09 f0       	breq	.+2      	; 0xcbc <StopWatch+0x14>
     cba:	e3 c0       	rjmp	.+454    	; 0xe82 <StopWatch+0x1da>
	{
	global_u8_SecCounter--;
     cbc:	80 91 83 01 	lds	r24, 0x0183
     cc0:	90 91 84 01 	lds	r25, 0x0184
     cc4:	a0 91 85 01 	lds	r26, 0x0185
     cc8:	b0 91 86 01 	lds	r27, 0x0186
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	a1 09       	sbc	r26, r1
     cd0:	b1 09       	sbc	r27, r1
     cd2:	80 93 83 01 	sts	0x0183, r24
     cd6:	90 93 84 01 	sts	0x0184, r25
     cda:	a0 93 85 01 	sts	0x0185, r26
     cde:	b0 93 86 01 	sts	0x0186, r27

	u8 local_u8_loop_counter=4;
     ce2:	84 e0       	ldi	r24, 0x04	; 4
     ce4:	89 83       	std	Y+1, r24	; 0x01
	/*-------------------------------------------------------------*/
    /*-------WHILE LOOP TO CLEAR LINE 2 on LCD---------*/
	HLCD_VoidGoToPos(LCD_U8_ROW1,LCD_U8_COL4);
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	64 e0       	ldi	r22, 0x04	; 4
     cea:	0e 94 53 11 	call	0x22a6	; 0x22a6 <HLCD_VoidGoToPos>
     cee:	06 c0       	rjmp	.+12     	; 0xcfc <StopWatch+0x54>
	while(local_u8_loop_counter<16)
	{
		HLCD_SendCommand(0x02);
     cf0:	82 e0       	ldi	r24, 0x02	; 2
     cf2:	0e 94 c4 0c 	call	0x1988	; 0x1988 <HLCD_SendCommand>
		local_u8_loop_counter++;
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	8f 5f       	subi	r24, 0xFF	; 255
     cfa:	89 83       	std	Y+1, r24	; 0x01

	u8 local_u8_loop_counter=4;
	/*-------------------------------------------------------------*/
    /*-------WHILE LOOP TO CLEAR LINE 2 on LCD---------*/
	HLCD_VoidGoToPos(LCD_U8_ROW1,LCD_U8_COL4);
	while(local_u8_loop_counter<16)
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	80 31       	cpi	r24, 0x10	; 16
     d00:	b8 f3       	brcs	.-18     	; 0xcf0 <StopWatch+0x48>
	{
		HLCD_SendCommand(0x02);
		local_u8_loop_counter++;
	}
	local_u8_loop_counter=4;
     d02:	84 e0       	ldi	r24, 0x04	; 4
     d04:	89 83       	std	Y+1, r24	; 0x01
	/*-------------------------------------------------------------*/
	/*--------LCD Display----------*/
	HLCD_VoidGoToPos(LCD_U8_ROW1,LCD_U8_COL4);
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	64 e0       	ldi	r22, 0x04	; 4
     d0a:	0e 94 53 11 	call	0x22a6	; 0x22a6 <HLCD_VoidGoToPos>
	HLCD_VoidDisplayNumber(global_u8_MinCounter);
     d0e:	80 91 87 01 	lds	r24, 0x0187
     d12:	90 91 88 01 	lds	r25, 0x0188
     d16:	a0 91 89 01 	lds	r26, 0x0189
     d1a:	b0 91 8a 01 	lds	r27, 0x018A
     d1e:	bc 01       	movw	r22, r24
     d20:	cd 01       	movw	r24, r26
     d22:	0e 94 8c 10 	call	0x2118	; 0x2118 <HLCD_VoidDisplayNumber>
	HLCD_VoidGoToPos(LCD_U8_ROW1,LCD_U8_COL10);
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	6a e0       	ldi	r22, 0x0A	; 10
     d2a:	0e 94 53 11 	call	0x22a6	; 0x22a6 <HLCD_VoidGoToPos>
	HLCD_VoidDisplayNumber(global_u8_SecCounter);
     d2e:	80 91 83 01 	lds	r24, 0x0183
     d32:	90 91 84 01 	lds	r25, 0x0184
     d36:	a0 91 85 01 	lds	r26, 0x0185
     d3a:	b0 91 86 01 	lds	r27, 0x0186
     d3e:	bc 01       	movw	r22, r24
     d40:	cd 01       	movw	r24, r26
     d42:	0e 94 8c 10 	call	0x2118	; 0x2118 <HLCD_VoidDisplayNumber>
	if(global_u8_SecCounter!= 0 && global_u8_MinCounter!= 0)
     d46:	80 91 83 01 	lds	r24, 0x0183
     d4a:	90 91 84 01 	lds	r25, 0x0184
     d4e:	a0 91 85 01 	lds	r26, 0x0185
     d52:	b0 91 86 01 	lds	r27, 0x0186
     d56:	00 97       	sbiw	r24, 0x00	; 0
     d58:	a1 05       	cpc	r26, r1
     d5a:	b1 05       	cpc	r27, r1
     d5c:	69 f0       	breq	.+26     	; 0xd78 <StopWatch+0xd0>
     d5e:	80 91 87 01 	lds	r24, 0x0187
     d62:	90 91 88 01 	lds	r25, 0x0188
     d66:	a0 91 89 01 	lds	r26, 0x0189
     d6a:	b0 91 8a 01 	lds	r27, 0x018A
     d6e:	00 97       	sbiw	r24, 0x00	; 0
     d70:	a1 05       	cpc	r26, r1
     d72:	b1 05       	cpc	r27, r1
     d74:	09 f0       	breq	.+2      	; 0xd78 <StopWatch+0xd0>
     d76:	85 c0       	rjmp	.+266    	; 0xe82 <StopWatch+0x1da>
	{
	}
	else if(global_u8_SecCounter== 0 && global_u8_MinCounter!= 0)
     d78:	80 91 83 01 	lds	r24, 0x0183
     d7c:	90 91 84 01 	lds	r25, 0x0184
     d80:	a0 91 85 01 	lds	r26, 0x0185
     d84:	b0 91 86 01 	lds	r27, 0x0186
     d88:	00 97       	sbiw	r24, 0x00	; 0
     d8a:	a1 05       	cpc	r26, r1
     d8c:	b1 05       	cpc	r27, r1
     d8e:	61 f5       	brne	.+88     	; 0xde8 <StopWatch+0x140>
     d90:	80 91 87 01 	lds	r24, 0x0187
     d94:	90 91 88 01 	lds	r25, 0x0188
     d98:	a0 91 89 01 	lds	r26, 0x0189
     d9c:	b0 91 8a 01 	lds	r27, 0x018A
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	a1 05       	cpc	r26, r1
     da4:	b1 05       	cpc	r27, r1
     da6:	01 f1       	breq	.+64     	; 0xde8 <StopWatch+0x140>
	{
		global_u8_MinCounter--;
     da8:	80 91 87 01 	lds	r24, 0x0187
     dac:	90 91 88 01 	lds	r25, 0x0188
     db0:	a0 91 89 01 	lds	r26, 0x0189
     db4:	b0 91 8a 01 	lds	r27, 0x018A
     db8:	01 97       	sbiw	r24, 0x01	; 1
     dba:	a1 09       	sbc	r26, r1
     dbc:	b1 09       	sbc	r27, r1
     dbe:	80 93 87 01 	sts	0x0187, r24
     dc2:	90 93 88 01 	sts	0x0188, r25
     dc6:	a0 93 89 01 	sts	0x0189, r26
     dca:	b0 93 8a 01 	sts	0x018A, r27
		global_u8_SecCounter=60;
     dce:	8c e3       	ldi	r24, 0x3C	; 60
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	a0 e0       	ldi	r26, 0x00	; 0
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	80 93 83 01 	sts	0x0183, r24
     dda:	90 93 84 01 	sts	0x0184, r25
     dde:	a0 93 85 01 	sts	0x0185, r26
     de2:	b0 93 86 01 	sts	0x0186, r27
     de6:	4d c0       	rjmp	.+154    	; 0xe82 <StopWatch+0x1da>
	}
	else if(global_u8_SecCounter== 0 && global_u8_MinCounter== 0)
     de8:	80 91 83 01 	lds	r24, 0x0183
     dec:	90 91 84 01 	lds	r25, 0x0184
     df0:	a0 91 85 01 	lds	r26, 0x0185
     df4:	b0 91 86 01 	lds	r27, 0x0186
     df8:	00 97       	sbiw	r24, 0x00	; 0
     dfa:	a1 05       	cpc	r26, r1
     dfc:	b1 05       	cpc	r27, r1
     dfe:	09 f0       	breq	.+2      	; 0xe02 <StopWatch+0x15a>
     e00:	40 c0       	rjmp	.+128    	; 0xe82 <StopWatch+0x1da>
     e02:	80 91 87 01 	lds	r24, 0x0187
     e06:	90 91 88 01 	lds	r25, 0x0188
     e0a:	a0 91 89 01 	lds	r26, 0x0189
     e0e:	b0 91 8a 01 	lds	r27, 0x018A
     e12:	00 97       	sbiw	r24, 0x00	; 0
     e14:	a1 05       	cpc	r26, r1
     e16:	b1 05       	cpc	r27, r1
     e18:	a1 f5       	brne	.+104    	; 0xe82 <StopWatch+0x1da>
	{
		/*-------------------------------------------------------------*/
	    /*-------WHILE LOOP TO CLEAR LINE 2 on LCD---------*/
		HLCD_VoidGoToPos(LCD_U8_ROW1,LCD_U8_COL4);
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	64 e0       	ldi	r22, 0x04	; 4
     e1e:	0e 94 53 11 	call	0x22a6	; 0x22a6 <HLCD_VoidGoToPos>
     e22:	06 c0       	rjmp	.+12     	; 0xe30 <StopWatch+0x188>
		while(local_u8_loop_counter<16)
		{
			HLCD_SendCommand(0x02);
     e24:	82 e0       	ldi	r24, 0x02	; 2
     e26:	0e 94 c4 0c 	call	0x1988	; 0x1988 <HLCD_SendCommand>
			local_u8_loop_counter++;
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	8f 5f       	subi	r24, 0xFF	; 255
     e2e:	89 83       	std	Y+1, r24	; 0x01
	else if(global_u8_SecCounter== 0 && global_u8_MinCounter== 0)
	{
		/*-------------------------------------------------------------*/
	    /*-------WHILE LOOP TO CLEAR LINE 2 on LCD---------*/
		HLCD_VoidGoToPos(LCD_U8_ROW1,LCD_U8_COL4);
		while(local_u8_loop_counter<16)
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	80 31       	cpi	r24, 0x10	; 16
     e34:	b8 f3       	brcs	.-18     	; 0xe24 <StopWatch+0x17c>
		{
			HLCD_SendCommand(0x02);
			local_u8_loop_counter++;
		}
		local_u8_loop_counter=4;
     e36:	84 e0       	ldi	r24, 0x04	; 4
     e38:	89 83       	std	Y+1, r24	; 0x01
		/*-------------------------------------------------------------*/
		/*--------LCD Display----------*/
		HLCD_VoidGoToPos(LCD_U8_ROW1,LCD_U8_COL4);
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	64 e0       	ldi	r22, 0x04	; 4
     e3e:	0e 94 53 11 	call	0x22a6	; 0x22a6 <HLCD_VoidGoToPos>
		HLCD_VoidDisplayNumber(global_u8_MinCounter);
     e42:	80 91 87 01 	lds	r24, 0x0187
     e46:	90 91 88 01 	lds	r25, 0x0188
     e4a:	a0 91 89 01 	lds	r26, 0x0189
     e4e:	b0 91 8a 01 	lds	r27, 0x018A
     e52:	bc 01       	movw	r22, r24
     e54:	cd 01       	movw	r24, r26
     e56:	0e 94 8c 10 	call	0x2118	; 0x2118 <HLCD_VoidDisplayNumber>
		HLCD_VoidGoToPos(LCD_U8_ROW1,LCD_U8_COL10);
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	6a e0       	ldi	r22, 0x0A	; 10
     e5e:	0e 94 53 11 	call	0x22a6	; 0x22a6 <HLCD_VoidGoToPos>
		HLCD_VoidDisplayNumber(global_u8_SecCounter);
     e62:	80 91 83 01 	lds	r24, 0x0183
     e66:	90 91 84 01 	lds	r25, 0x0184
     e6a:	a0 91 85 01 	lds	r26, 0x0185
     e6e:	b0 91 86 01 	lds	r27, 0x0186
     e72:	bc 01       	movw	r22, r24
     e74:	cd 01       	movw	r24, r26
     e76:	0e 94 8c 10 	call	0x2118	; 0x2118 <HLCD_VoidDisplayNumber>
		/*-------------------------------------------------------------*/
		/*-----Function to toggle LED -----*/
		TOGGLE();
     e7a:	0e 94 a3 05 	call	0xb46	; 0xb46 <TOGGLE>
		/*-------------------------------------------------------------*/
		/*-----Clear this flag to start a new process -----*/
		global_u8_program_flag=0;
     e7e:	10 92 82 01 	sts	0x0182, r1
	}
	}
}
     e82:	0f 90       	pop	r0
     e84:	cf 91       	pop	r28
     e86:	df 91       	pop	r29
     e88:	08 95       	ret

00000e8a <APP_u8_GetNumber>:
/*---------------------------------------------------------------------------------------------------------------------*/
void APP_u8_GetNumber(void)
{
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	00 d0       	rcall	.+0      	; 0xe90 <APP_u8_GetNumber+0x6>
     e90:	00 d0       	rcall	.+0      	; 0xe92 <APP_u8_GetNumber+0x8>
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
	static u8 static_local_u8_flag=0;
	u8 local_u8_key1,local_u8_loop_flag=1;
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	8b 83       	std	Y+3, r24	; 0x03
	u32 *local_u32_pointer =NULL;
     e9a:	1a 82       	std	Y+2, r1	; 0x02
     e9c:	19 82       	std	Y+1, r1	; 0x01

	/* get the pressed button from keypad */
	local_u8_key1 = HKEYPAD_u8_GetPressedKey();
     e9e:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HKEYPAD_u8_GetPressedKey>
     ea2:	8c 83       	std	Y+4, r24	; 0x04
     ea4:	03 c0       	rjmp	.+6      	; 0xeac <APP_u8_GetNumber+0x22>

	/*make sure that the entered key = a number */
    while(  local_u8_key1==KEYPAD_u8_KEY_NOT_PRESSED  || APPCALCULATOR_u8_CheckNum(local_u8_key1)!='n')
    {
    	 /*get the pressed button from keypad */
    	local_u8_key1 = HKEYPAD_u8_GetPressedKey();
     ea6:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HKEYPAD_u8_GetPressedKey>
     eaa:	8c 83       	std	Y+4, r24	; 0x04

	/* get the pressed button from keypad */
	local_u8_key1 = HKEYPAD_u8_GetPressedKey();

	/*make sure that the entered key = a number */
    while(  local_u8_key1==KEYPAD_u8_KEY_NOT_PRESSED  || APPCALCULATOR_u8_CheckNum(local_u8_key1)!='n')
     eac:	8c 81       	ldd	r24, Y+4	; 0x04
     eae:	8f 3f       	cpi	r24, 0xFF	; 255
     eb0:	d1 f3       	breq	.-12     	; 0xea6 <APP_u8_GetNumber+0x1c>
     eb2:	8c 81       	ldd	r24, Y+4	; 0x04
     eb4:	0e 94 b7 05 	call	0xb6e	; 0xb6e <APPCALCULATOR_u8_CheckNum>
     eb8:	8e 36       	cpi	r24, 0x6E	; 110
     eba:	a9 f7       	brne	.-22     	; 0xea6 <APP_u8_GetNumber+0x1c>
    {
    	 /*get the pressed button from keypad */
    	local_u8_key1 = HKEYPAD_u8_GetPressedKey();
    }
    HLCD_VoidClearDisplay();
     ebc:	0e 94 04 10 	call	0x2008	; 0x2008 <HLCD_VoidClearDisplay>
    HLCD_VoidGoToPos(LCD_U8_ROW0,LCD_U8_COL0);
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	0e 94 53 11 	call	0x22a6	; 0x22a6 <HLCD_VoidGoToPos>
    if(static_local_u8_flag==0)
     ec8:	80 91 94 01 	lds	r24, 0x0194
     ecc:	88 23       	and	r24, r24
     ece:	61 f4       	brne	.+24     	; 0xee8 <APP_u8_GetNumber+0x5e>
    {
    HLCD_VoidSendString("MINUTES = ");
     ed0:	80 e6       	ldi	r24, 0x60	; 96
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <HLCD_VoidSendString>
    local_u32_pointer=&global_u32_num1;
     ed8:	8b e8       	ldi	r24, 0x8B	; 139
     eda:	91 e0       	ldi	r25, 0x01	; 1
     edc:	9a 83       	std	Y+2, r25	; 0x02
     ede:	89 83       	std	Y+1, r24	; 0x01
    static_local_u8_flag=1;
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	80 93 94 01 	sts	0x0194, r24
     ee6:	0e c0       	rjmp	.+28     	; 0xf04 <APP_u8_GetNumber+0x7a>
    }
    else if(static_local_u8_flag==1)
     ee8:	80 91 94 01 	lds	r24, 0x0194
     eec:	81 30       	cpi	r24, 0x01	; 1
     eee:	51 f4       	brne	.+20     	; 0xf04 <APP_u8_GetNumber+0x7a>
    {
    HLCD_VoidSendString("SECONDS = ");
     ef0:	8b e6       	ldi	r24, 0x6B	; 107
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <HLCD_VoidSendString>
    local_u32_pointer=&global_u32_num2;
     ef8:	8f e8       	ldi	r24, 0x8F	; 143
     efa:	91 e0       	ldi	r25, 0x01	; 1
     efc:	9a 83       	std	Y+2, r25	; 0x02
     efe:	89 83       	std	Y+1, r24	; 0x01
    static_local_u8_flag=0;
     f00:	10 92 94 01 	sts	0x0194, r1
    }
	HLCD_VoidSendData(local_u8_key1);
     f04:	8c 81       	ldd	r24, Y+4	; 0x04
     f06:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <HLCD_VoidSendData>
	/*FUNCTION TO ADD A NEW DIGIT TO THE NUMBER*/
	APPCALCULATOR_u8_CreatNum(local_u32_pointer,local_u8_key1);
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	9a 81       	ldd	r25, Y+2	; 0x02
     f0e:	6c 81       	ldd	r22, Y+4	; 0x04
     f10:	0e 94 cf 05 	call	0xb9e	; 0xb9e <APPCALCULATOR_u8_CreatNum>
	/* get the pressed button from keypad */
	local_u8_key1 = HKEYPAD_u8_GetPressedKey();
     f14:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HKEYPAD_u8_GetPressedKey>
     f18:	8c 83       	std	Y+4, r24	; 0x04
     f1a:	20 c0       	rjmp	.+64     	; 0xf5c <APP_u8_GetNumber+0xd2>

	/*GO OUT WHILE WHEN INPUT == '='*/
	while( local_u8_loop_flag==1 )
	{
		/*make sure that the entered key = number or '=' character*/
		 if(local_u8_key1!=KEYPAD_u8_KEY_NOT_PRESSED && (local_u8_key1>='0' &&  local_u8_key1<='9'))
     f1c:	8c 81       	ldd	r24, Y+4	; 0x04
     f1e:	8f 3f       	cpi	r24, 0xFF	; 255
     f20:	91 f0       	breq	.+36     	; 0xf46 <APP_u8_GetNumber+0xbc>
     f22:	8c 81       	ldd	r24, Y+4	; 0x04
     f24:	80 33       	cpi	r24, 0x30	; 48
     f26:	78 f0       	brcs	.+30     	; 0xf46 <APP_u8_GetNumber+0xbc>
     f28:	8c 81       	ldd	r24, Y+4	; 0x04
     f2a:	8a 33       	cpi	r24, 0x3A	; 58
     f2c:	60 f4       	brcc	.+24     	; 0xf46 <APP_u8_GetNumber+0xbc>
		 {
			 HLCD_VoidSendData(local_u8_key1);
     f2e:	8c 81       	ldd	r24, Y+4	; 0x04
     f30:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <HLCD_VoidSendData>
			 /*FUNCTION TO ADD A NEW DIGIT TO THE NUMBER*/
			 APPCALCULATOR_u8_CreatNum(local_u32_pointer,local_u8_key1);
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	9a 81       	ldd	r25, Y+2	; 0x02
     f38:	6c 81       	ldd	r22, Y+4	; 0x04
     f3a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <APPCALCULATOR_u8_CreatNum>
			 /* get the pressed button from keypad */
			 local_u8_key1 = HKEYPAD_u8_GetPressedKey();
     f3e:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HKEYPAD_u8_GetPressedKey>
     f42:	8c 83       	std	Y+4, r24	; 0x04
     f44:	0b c0       	rjmp	.+22     	; 0xf5c <APP_u8_GetNumber+0xd2>
		 }
		 else if( local_u8_key1!=KEYPAD_u8_KEY_NOT_PRESSED &&   local_u8_key1=='=' )
     f46:	8c 81       	ldd	r24, Y+4	; 0x04
     f48:	8f 3f       	cpi	r24, 0xFF	; 255
     f4a:	29 f0       	breq	.+10     	; 0xf56 <APP_u8_GetNumber+0xcc>
     f4c:	8c 81       	ldd	r24, Y+4	; 0x04
     f4e:	8d 33       	cpi	r24, 0x3D	; 61
     f50:	11 f4       	brne	.+4      	; 0xf56 <APP_u8_GetNumber+0xcc>
		 {
			 /*The user entered '=' so go out the while loop */
			 local_u8_loop_flag=0;
     f52:	1b 82       	std	Y+3, r1	; 0x03
     f54:	03 c0       	rjmp	.+6      	; 0xf5c <APP_u8_GetNumber+0xd2>
		 }
		 else
		 {   /*IF THE INPUT CHARACTER NOT '=' NOR A NUMBER*/
			 /* get the pressed button from keypad again */
			 local_u8_key1 = HKEYPAD_u8_GetPressedKey();
     f56:	0e 94 ca 0b 	call	0x1794	; 0x1794 <HKEYPAD_u8_GetPressedKey>
     f5a:	8c 83       	std	Y+4, r24	; 0x04
	APPCALCULATOR_u8_CreatNum(local_u32_pointer,local_u8_key1);
	/* get the pressed button from keypad */
	local_u8_key1 = HKEYPAD_u8_GetPressedKey();

	/*GO OUT WHILE WHEN INPUT == '='*/
	while( local_u8_loop_flag==1 )
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	81 30       	cpi	r24, 0x01	; 1
     f60:	e9 f2       	breq	.-70     	; 0xf1c <APP_u8_GetNumber+0x92>
		 {   /*IF THE INPUT CHARACTER NOT '=' NOR A NUMBER*/
			 /* get the pressed button from keypad again */
			 local_u8_key1 = HKEYPAD_u8_GetPressedKey();
		 }
	}
}
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	08 95       	ret

00000f70 <main>:
int main(void)
{
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
	MDIO_VoidInit();
     f78:	0e 94 3a 08 	call	0x1074	; 0x1074 <MDIO_VoidInit>
    MDIO_VoidSetPortDirection(DIO_U8_PORTA,DIO_U8_PORT_OUTPUT);
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	6f ef       	ldi	r22, 0xFF	; 255
     f80:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_VoidSetPortDirection>
	MDIO_VoidSetPortDirection(DIO_U8_PORTC,DIO_U8_PORT_OUTPUT);
     f84:	82 e0       	ldi	r24, 0x02	; 2
     f86:	6f ef       	ldi	r22, 0xFF	; 255
     f88:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_VoidSetPortDirection>
	MDIO_VoidSetPortDirection(DIO_U8_PORTB,0x0f);
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	6f e0       	ldi	r22, 0x0F	; 15
     f90:	0e 94 18 0b 	call	0x1630	; 0x1630 <MDIO_VoidSetPortDirection>
	MTIMERS_voidTimer0Init();
     f94:	0e 94 ce 12 	call	0x259c	; 0x259c <MTIMERS_voidTimer0Init>
	HLCD_VoidInit();
     f98:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <HLCD_VoidInit>

	while(1)
	{
       if(global_u8_program_flag==0)
     f9c:	80 91 82 01 	lds	r24, 0x0182
     fa0:	88 23       	and	r24, r24
     fa2:	e1 f7       	brne	.-8      	; 0xf9c <main+0x2c>
       {
    	 global_u32_num1=0;
     fa4:	10 92 8b 01 	sts	0x018B, r1
     fa8:	10 92 8c 01 	sts	0x018C, r1
     fac:	10 92 8d 01 	sts	0x018D, r1
     fb0:	10 92 8e 01 	sts	0x018E, r1
    	 global_u32_num2=0;
     fb4:	10 92 8f 01 	sts	0x018F, r1
     fb8:	10 92 90 01 	sts	0x0190, r1
     fbc:	10 92 91 01 	sts	0x0191, r1
     fc0:	10 92 92 01 	sts	0x0192, r1

    	 /*-------------------------------------------------------------*/
    	 /*--------LCD Display----------*/
		HLCD_VoidClearDisplay();
     fc4:	0e 94 04 10 	call	0x2008	; 0x2008 <HLCD_VoidClearDisplay>
		HLCD_VoidGoToPos(LCD_U8_ROW0,LCD_U8_COL2);
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	62 e0       	ldi	r22, 0x02	; 2
     fcc:	0e 94 53 11 	call	0x22a6	; 0x22a6 <HLCD_VoidGoToPos>
		HLCD_VoidSendString("ENTER MINUTES");
     fd0:	86 e7       	ldi	r24, 0x76	; 118
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <HLCD_VoidSendString>
		HLCD_VoidGoToPos(LCD_U8_ROW1,LCD_U8_COL2);
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	62 e0       	ldi	r22, 0x02	; 2
     fdc:	0e 94 53 11 	call	0x22a6	; 0x22a6 <HLCD_VoidGoToPos>
		HLCD_VoidSendString("THEN ENTER =");
     fe0:	84 e8       	ldi	r24, 0x84	; 132
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <HLCD_VoidSendString>
		/* ASK USER TO INPUT THE NUMBER OF MINUTES*/
		APP_u8_GetNumber();
     fe8:	0e 94 45 07 	call	0xe8a	; 0xe8a <APP_u8_GetNumber>

		/*-------------------------------------------------------------*/
		/*--------LCD Display----------*/
		HLCD_VoidClearDisplay();
     fec:	0e 94 04 10 	call	0x2008	; 0x2008 <HLCD_VoidClearDisplay>
        HLCD_VoidGoToPos(LCD_U8_ROW0,LCD_U8_COL2);
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	62 e0       	ldi	r22, 0x02	; 2
     ff4:	0e 94 53 11 	call	0x22a6	; 0x22a6 <HLCD_VoidGoToPos>
		HLCD_VoidSendString("ENTER SECONDS");
     ff8:	81 e9       	ldi	r24, 0x91	; 145
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <HLCD_VoidSendString>
		HLCD_VoidGoToPos(LCD_U8_ROW1,LCD_U8_COL2);
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	62 e0       	ldi	r22, 0x02	; 2
    1004:	0e 94 53 11 	call	0x22a6	; 0x22a6 <HLCD_VoidGoToPos>
		HLCD_VoidSendString("THEN ENTER =");
    1008:	84 e8       	ldi	r24, 0x84	; 132
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <HLCD_VoidSendString>
		/* ASK USER TO INPUT THE NUMBER OF SECONDS*/
		APP_u8_GetNumber();
    1010:	0e 94 45 07 	call	0xe8a	; 0xe8a <APP_u8_GetNumber>

		/*-------------------------------------------------------------*/
		/*--------LCD Display----------*/
	    HLCD_VoidClearDisplay();
    1014:	0e 94 04 10 	call	0x2008	; 0x2008 <HLCD_VoidClearDisplay>
		HLCD_VoidGoToPos(LCD_U8_ROW0,LCD_U8_COL0);
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	0e 94 53 11 	call	0x22a6	; 0x22a6 <HLCD_VoidGoToPos>
		HLCD_VoidSendString("MINUTES :");
    1020:	8f e9       	ldi	r24, 0x9F	; 159
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <HLCD_VoidSendString>
		HLCD_VoidGoToPos(LCD_U8_ROW0,LCD_U8_COL9);
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	69 e0       	ldi	r22, 0x09	; 9
    102c:	0e 94 53 11 	call	0x22a6	; 0x22a6 <HLCD_VoidGoToPos>
		HLCD_VoidSendString("SECONDS");
    1030:	89 ea       	ldi	r24, 0xA9	; 169
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <HLCD_VoidSendString>

		/*-------------------------------------------------------------*/
		/*-----Set SecCounter & MinCounter Values----------*/
		SetGlobalSecCounterMinCounter(global_u32_num1,global_u32_num2);
    1038:	80 91 8b 01 	lds	r24, 0x018B
    103c:	90 91 8c 01 	lds	r25, 0x018C
    1040:	a0 91 8d 01 	lds	r26, 0x018D
    1044:	b0 91 8e 01 	lds	r27, 0x018E
    1048:	20 91 8f 01 	lds	r18, 0x018F
    104c:	30 91 90 01 	lds	r19, 0x0190
    1050:	40 91 91 01 	lds	r20, 0x0191
    1054:	50 91 92 01 	lds	r21, 0x0192
    1058:	bc 01       	movw	r22, r24
    105a:	cd 01       	movw	r24, r26
    105c:	0e 94 00 06 	call	0xc00	; 0xc00 <SetGlobalSecCounterMinCounter>

		/*-------------------------------------------------------------*/
		/*-----Start StopWatch----------*/
		MTIMERS_voidTimer0CTCSetCallBack(StopWatch);
    1060:	84 e5       	ldi	r24, 0x54	; 84
    1062:	96 e0       	ldi	r25, 0x06	; 6
    1064:	0e 94 0e 13 	call	0x261c	; 0x261c <MTIMERS_voidTimer0CTCSetCallBack>
	    MGI_voidEnable();
    1068:	0e 94 ae 0b 	call	0x175c	; 0x175c <MGI_voidEnable>

	    /* Set global_u8_program_flag to 1         -------
 	 	   wait function StopWatch to clear it =0  -------
 	 	   then start a new process                -------
 	 	*/
	    global_u8_program_flag=1;
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	80 93 82 01 	sts	0x0182, r24
    1072:	94 cf       	rjmp	.-216    	; 0xf9c <main+0x2c>

00001074 <MDIO_VoidInit>:
#include "../Include/MCAL/DIO/DIO_Interface.h"
#include "../Include/MCAL/DIO/DIO_Private.h"

/*---------------------------------------------------------------------------------------------------------------------------*/
void MDIO_VoidInit(void)
{
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
	DIO_U8_DDRA_REG= CONC_BIT(DIO_U8_PA7_INITIAL_DIRECTION
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8f ef       	ldi	r24, 0xFF	; 255
    1082:	80 83       	st	Z, r24
						         ,DIO_U8_PA3_INITIAL_DIRECTION
						         ,DIO_U8_PA2_INITIAL_DIRECTION
						         ,DIO_U8_PA1_INITIAL_DIRECTION
						         ,DIO_U8_PA0_INITIAL_DIRECTION);

	DIO_U8_DDRB_REG= CONC_BIT(DIO_U8_PB7_INITIAL_DIRECTION
    1084:	e7 e3       	ldi	r30, 0x37	; 55
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 ef       	ldi	r24, 0xF0	; 240
    108a:	80 83       	st	Z, r24
					         ,DIO_U8_PB3_INITIAL_DIRECTION
					         ,DIO_U8_PB2_INITIAL_DIRECTION
					         ,DIO_U8_PB1_INITIAL_DIRECTION
					         ,DIO_U8_PB0_INITIAL_DIRECTION);

	DIO_U8_DDRC_REG= CONC_BIT(DIO_U8_PC7_INITIAL_DIRECTION
    108c:	e4 e3       	ldi	r30, 0x34	; 52
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	8f ef       	ldi	r24, 0xFF	; 255
    1092:	80 83       	st	Z, r24
						     ,DIO_U8_PC3_INITIAL_DIRECTION
						     ,DIO_U8_PC2_INITIAL_DIRECTION
						     ,DIO_U8_PC1_INITIAL_DIRECTION
						     ,DIO_U8_PC0_INITIAL_DIRECTION);

	DIO_U8_DDRD_REG= CONC_BIT(DIO_U8_PD7_INITIAL_DIRECTION
    1094:	e1 e3       	ldi	r30, 0x31	; 49
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	8f ef       	ldi	r24, 0xFF	; 255
    109a:	80 83       	st	Z, r24
					         ,DIO_U8_PD3_INITIAL_DIRECTION
					         ,DIO_U8_PD2_INITIAL_DIRECTION
					         ,DIO_U8_PD1_INITIAL_DIRECTION
					         ,DIO_U8_PD0_INITIAL_DIRECTION);

	DIO_U8_PORTA_REG= CONC_BIT(DIO_U8_PA7_INITIAL_VALUE
    109c:	eb e3       	ldi	r30, 0x3B	; 59
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	10 82       	st	Z, r1
					          ,DIO_U8_PA3_INITIAL_VALUE
					          ,DIO_U8_PA2_INITIAL_VALUE
					          ,DIO_U8_PA1_INITIAL_VALUE
					          ,DIO_U8_PA0_INITIAL_VALUE);

	DIO_U8_PORTB_REG= CONC_BIT(DIO_U8_PB7_INITIAL_VALUE
    10a2:	e8 e3       	ldi	r30, 0x38	; 56
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	8f ef       	ldi	r24, 0xFF	; 255
    10a8:	80 83       	st	Z, r24
						      ,DIO_U8_PB3_INITIAL_VALUE
						      ,DIO_U8_PB2_INITIAL_VALUE
						      ,DIO_U8_PB1_INITIAL_VALUE
						      ,DIO_U8_PB0_INITIAL_VALUE);

	DIO_U8_PORTC_REG= CONC_BIT(DIO_U8_PC7_INITIAL_VALUE
    10aa:	e5 e3       	ldi	r30, 0x35	; 53
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	10 82       	st	Z, r1
							  ,DIO_U8_PC3_INITIAL_VALUE
							  ,DIO_U8_PC2_INITIAL_VALUE
							  ,DIO_U8_PC1_INITIAL_VALUE
							  ,DIO_U8_PC0_INITIAL_VALUE);

	DIO_U8_PORTD_REG= CONC_BIT(DIO_U8_PD7_INITIAL_VALUE
    10b0:	e2 e3       	ldi	r30, 0x32	; 50
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	10 82       	st	Z, r1
						      ,DIO_U8_PD4_INITIAL_VALUE
						      ,DIO_U8_PD3_INITIAL_VALUE
						      ,DIO_U8_PD2_INITIAL_VALUE
						      ,DIO_U8_PD1_INITIAL_VALUE
						      ,DIO_U8_PD0_INITIAL_VALUE);
}
    10b6:	cf 91       	pop	r28
    10b8:	df 91       	pop	r29
    10ba:	08 95       	ret

000010bc <MDIO_VoidSetPinDirection>:
/*---------------------------------------------------------------------------------------------------------------------------*/
void MDIO_VoidSetPinDirection(u8 copy_u8portid,u8 copy_u8pinid,u8 copy_u8pindirection)
{
    10bc:	df 93       	push	r29
    10be:	cf 93       	push	r28
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	2d 97       	sbiw	r28, 0x0d	; 13
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	cd bf       	out	0x3d, r28	; 61
    10d0:	89 83       	std	Y+1, r24	; 0x01
    10d2:	6a 83       	std	Y+2, r22	; 0x02
    10d4:	4b 83       	std	Y+3, r20	; 0x03
	if( (copy_u8portid > DIO_U8_PORTD) || (copy_u8portid < DIO_U8_PORTA) )
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	84 30       	cpi	r24, 0x04	; 4
    10da:	08 f0       	brcs	.+2      	; 0x10de <MDIO_VoidSetPinDirection+0x22>
    10dc:	00 c1       	rjmp	.+512    	; 0x12de <MDIO_VoidSetPinDirection+0x222>
	{

	}
else
{
	switch(copy_u8portid)
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	3d 87       	std	Y+13, r19	; 0x0d
    10e6:	2c 87       	std	Y+12, r18	; 0x0c
    10e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    10ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	91 05       	cpc	r25, r1
    10f0:	09 f4       	brne	.+2      	; 0x10f4 <MDIO_VoidSetPinDirection+0x38>
    10f2:	4f c0       	rjmp	.+158    	; 0x1192 <MDIO_VoidSetPinDirection+0xd6>
    10f4:	2c 85       	ldd	r18, Y+12	; 0x0c
    10f6:	3d 85       	ldd	r19, Y+13	; 0x0d
    10f8:	22 30       	cpi	r18, 0x02	; 2
    10fa:	31 05       	cpc	r19, r1
    10fc:	2c f4       	brge	.+10     	; 0x1108 <MDIO_VoidSetPinDirection+0x4c>
    10fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    1100:	9d 85       	ldd	r25, Y+13	; 0x0d
    1102:	00 97       	sbiw	r24, 0x00	; 0
    1104:	71 f0       	breq	.+28     	; 0x1122 <MDIO_VoidSetPinDirection+0x66>
    1106:	eb c0       	rjmp	.+470    	; 0x12de <MDIO_VoidSetPinDirection+0x222>
    1108:	2c 85       	ldd	r18, Y+12	; 0x0c
    110a:	3d 85       	ldd	r19, Y+13	; 0x0d
    110c:	22 30       	cpi	r18, 0x02	; 2
    110e:	31 05       	cpc	r19, r1
    1110:	09 f4       	brne	.+2      	; 0x1114 <MDIO_VoidSetPinDirection+0x58>
    1112:	77 c0       	rjmp	.+238    	; 0x1202 <MDIO_VoidSetPinDirection+0x146>
    1114:	8c 85       	ldd	r24, Y+12	; 0x0c
    1116:	9d 85       	ldd	r25, Y+13	; 0x0d
    1118:	83 30       	cpi	r24, 0x03	; 3
    111a:	91 05       	cpc	r25, r1
    111c:	09 f4       	brne	.+2      	; 0x1120 <MDIO_VoidSetPinDirection+0x64>
    111e:	a9 c0       	rjmp	.+338    	; 0x1272 <MDIO_VoidSetPinDirection+0x1b6>
    1120:	de c0       	rjmp	.+444    	; 0x12de <MDIO_VoidSetPinDirection+0x222>
	{
	case DIO_U8_PORTA:
		switch(copy_u8pindirection)
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	3b 87       	std	Y+11, r19	; 0x0b
    112a:	2a 87       	std	Y+10, r18	; 0x0a
    112c:	8a 85       	ldd	r24, Y+10	; 0x0a
    112e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	d1 f0       	breq	.+52     	; 0x1168 <MDIO_VoidSetPinDirection+0xac>
    1134:	2a 85       	ldd	r18, Y+10	; 0x0a
    1136:	3b 85       	ldd	r19, Y+11	; 0x0b
    1138:	21 30       	cpi	r18, 0x01	; 1
    113a:	31 05       	cpc	r19, r1
    113c:	09 f0       	breq	.+2      	; 0x1140 <MDIO_VoidSetPinDirection+0x84>
    113e:	cf c0       	rjmp	.+414    	; 0x12de <MDIO_VoidSetPinDirection+0x222>
		{
		   case DIO_U8_OUTPUT: SET_BIT(DIO_U8_DDRA_REG,copy_u8pinid);
    1140:	aa e3       	ldi	r26, 0x3A	; 58
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	ea e3       	ldi	r30, 0x3A	; 58
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	48 2f       	mov	r20, r24
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	02 2e       	mov	r0, r18
    1158:	02 c0       	rjmp	.+4      	; 0x115e <MDIO_VoidSetPinDirection+0xa2>
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	0a 94       	dec	r0
    1160:	e2 f7       	brpl	.-8      	; 0x115a <MDIO_VoidSetPinDirection+0x9e>
    1162:	84 2b       	or	r24, r20
    1164:	8c 93       	st	X, r24
    1166:	bb c0       	rjmp	.+374    	; 0x12de <MDIO_VoidSetPinDirection+0x222>
		   break;
		   case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRA_REG,copy_u8pinid);
    1168:	aa e3       	ldi	r26, 0x3A	; 58
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	ea e3       	ldi	r30, 0x3A	; 58
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	48 2f       	mov	r20, r24
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	02 2e       	mov	r0, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <MDIO_VoidSetPinDirection+0xca>
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	0a 94       	dec	r0
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <MDIO_VoidSetPinDirection+0xc6>
    118a:	80 95       	com	r24
    118c:	84 23       	and	r24, r20
    118e:	8c 93       	st	X, r24
    1190:	a6 c0       	rjmp	.+332    	; 0x12de <MDIO_VoidSetPinDirection+0x222>
		   break;
		}
		break;

	case DIO_U8_PORTB:
		switch(copy_u8pindirection)
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	39 87       	std	Y+9, r19	; 0x09
    119a:	28 87       	std	Y+8, r18	; 0x08
    119c:	88 85       	ldd	r24, Y+8	; 0x08
    119e:	99 85       	ldd	r25, Y+9	; 0x09
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	d1 f0       	breq	.+52     	; 0x11d8 <MDIO_VoidSetPinDirection+0x11c>
    11a4:	28 85       	ldd	r18, Y+8	; 0x08
    11a6:	39 85       	ldd	r19, Y+9	; 0x09
    11a8:	21 30       	cpi	r18, 0x01	; 1
    11aa:	31 05       	cpc	r19, r1
    11ac:	09 f0       	breq	.+2      	; 0x11b0 <MDIO_VoidSetPinDirection+0xf4>
    11ae:	97 c0       	rjmp	.+302    	; 0x12de <MDIO_VoidSetPinDirection+0x222>
		{
		   case DIO_U8_OUTPUT: SET_BIT(DIO_U8_DDRB_REG,copy_u8pinid);
    11b0:	a7 e3       	ldi	r26, 0x37	; 55
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e7 e3       	ldi	r30, 0x37	; 55
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 2e       	mov	r0, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <MDIO_VoidSetPinDirection+0x112>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	0a 94       	dec	r0
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <MDIO_VoidSetPinDirection+0x10e>
    11d2:	84 2b       	or	r24, r20
    11d4:	8c 93       	st	X, r24
    11d6:	83 c0       	rjmp	.+262    	; 0x12de <MDIO_VoidSetPinDirection+0x222>
		   break;
		   case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRB_REG,copy_u8pinid);
    11d8:	a7 e3       	ldi	r26, 0x37	; 55
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e7 e3       	ldi	r30, 0x37	; 55
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	48 2f       	mov	r20, r24
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	02 2e       	mov	r0, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <MDIO_VoidSetPinDirection+0x13a>
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	0a 94       	dec	r0
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <MDIO_VoidSetPinDirection+0x136>
    11fa:	80 95       	com	r24
    11fc:	84 23       	and	r24, r20
    11fe:	8c 93       	st	X, r24
    1200:	6e c0       	rjmp	.+220    	; 0x12de <MDIO_VoidSetPinDirection+0x222>
		   break;
				}
	    break;
	case DIO_U8_PORTC:
		switch(copy_u8pindirection)
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	3f 83       	std	Y+7, r19	; 0x07
    120a:	2e 83       	std	Y+6, r18	; 0x06
    120c:	8e 81       	ldd	r24, Y+6	; 0x06
    120e:	9f 81       	ldd	r25, Y+7	; 0x07
    1210:	00 97       	sbiw	r24, 0x00	; 0
    1212:	d1 f0       	breq	.+52     	; 0x1248 <MDIO_VoidSetPinDirection+0x18c>
    1214:	2e 81       	ldd	r18, Y+6	; 0x06
    1216:	3f 81       	ldd	r19, Y+7	; 0x07
    1218:	21 30       	cpi	r18, 0x01	; 1
    121a:	31 05       	cpc	r19, r1
    121c:	09 f0       	breq	.+2      	; 0x1220 <MDIO_VoidSetPinDirection+0x164>
    121e:	5f c0       	rjmp	.+190    	; 0x12de <MDIO_VoidSetPinDirection+0x222>
		{
			 case DIO_U8_OUTPUT: SET_BIT(DIO_U8_DDRC_REG,copy_u8pinid);
    1220:	a4 e3       	ldi	r26, 0x34	; 52
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e4 e3       	ldi	r30, 0x34	; 52
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	48 2f       	mov	r20, r24
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 2e       	mov	r0, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <MDIO_VoidSetPinDirection+0x182>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <MDIO_VoidSetPinDirection+0x17e>
    1242:	84 2b       	or	r24, r20
    1244:	8c 93       	st	X, r24
    1246:	4b c0       	rjmp	.+150    	; 0x12de <MDIO_VoidSetPinDirection+0x222>
			 break;
			 case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRC_REG,copy_u8pinid);
    1248:	a4 e3       	ldi	r26, 0x34	; 52
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e4 e3       	ldi	r30, 0x34	; 52
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 2e       	mov	r0, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <MDIO_VoidSetPinDirection+0x1aa>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <MDIO_VoidSetPinDirection+0x1a6>
    126a:	80 95       	com	r24
    126c:	84 23       	and	r24, r20
    126e:	8c 93       	st	X, r24
    1270:	36 c0       	rjmp	.+108    	; 0x12de <MDIO_VoidSetPinDirection+0x222>
			 break;
			}
						break;
		case DIO_U8_PORTD:
				switch(copy_u8pindirection)
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	3d 83       	std	Y+5, r19	; 0x05
    127a:	2c 83       	std	Y+4, r18	; 0x04
    127c:	8c 81       	ldd	r24, Y+4	; 0x04
    127e:	9d 81       	ldd	r25, Y+5	; 0x05
    1280:	00 97       	sbiw	r24, 0x00	; 0
    1282:	c9 f0       	breq	.+50     	; 0x12b6 <MDIO_VoidSetPinDirection+0x1fa>
    1284:	2c 81       	ldd	r18, Y+4	; 0x04
    1286:	3d 81       	ldd	r19, Y+5	; 0x05
    1288:	21 30       	cpi	r18, 0x01	; 1
    128a:	31 05       	cpc	r19, r1
    128c:	41 f5       	brne	.+80     	; 0x12de <MDIO_VoidSetPinDirection+0x222>
				{
				   case DIO_U8_OUTPUT: SET_BIT(DIO_U8_DDRD_REG,copy_u8pinid);
    128e:	a1 e3       	ldi	r26, 0x31	; 49
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e1 e3       	ldi	r30, 0x31	; 49
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	48 2f       	mov	r20, r24
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	02 2e       	mov	r0, r18
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <MDIO_VoidSetPinDirection+0x1f0>
    12a8:	88 0f       	add	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	0a 94       	dec	r0
    12ae:	e2 f7       	brpl	.-8      	; 0x12a8 <MDIO_VoidSetPinDirection+0x1ec>
    12b0:	84 2b       	or	r24, r20
    12b2:	8c 93       	st	X, r24
    12b4:	14 c0       	rjmp	.+40     	; 0x12de <MDIO_VoidSetPinDirection+0x222>
				   break;
				   case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRD_REG,copy_u8pinid);
    12b6:	a1 e3       	ldi	r26, 0x31	; 49
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e1 e3       	ldi	r30, 0x31	; 49
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	48 2f       	mov	r20, r24
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	02 2e       	mov	r0, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <MDIO_VoidSetPinDirection+0x218>
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	0a 94       	dec	r0
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <MDIO_VoidSetPinDirection+0x214>
    12d8:	80 95       	com	r24
    12da:	84 23       	and	r24, r20
    12dc:	8c 93       	st	X, r24
				}
				break;
	}
	}

}
    12de:	2d 96       	adiw	r28, 0x0d	; 13
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	de bf       	out	0x3e, r29	; 62
    12e6:	0f be       	out	0x3f, r0	; 63
    12e8:	cd bf       	out	0x3d, r28	; 61
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	08 95       	ret

000012f0 <MDIO_VoidSetPinValue>:
/*---------------------------------------------------------------------------------------------------------------------------*/
void MDIO_VoidSetPinValue(u8 copy_u8portid,u8 copy_u8pinid,u8 copy_u8pinValue)
{
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	2d 97       	sbiw	r28, 0x0d	; 13
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	cd bf       	out	0x3d, r28	; 61
    1304:	89 83       	std	Y+1, r24	; 0x01
    1306:	6a 83       	std	Y+2, r22	; 0x02
    1308:	4b 83       	std	Y+3, r20	; 0x03
	if( (copy_u8portid > DIO_U8_PORTD) || (copy_u8portid < DIO_U8_PORTA)||	(copy_u8pinid > DIO_U8_PIN7) || (copy_u8pinid < DIO_U8_PIN0) )
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	84 30       	cpi	r24, 0x04	; 4
    130e:	08 f0       	brcs	.+2      	; 0x1312 <MDIO_VoidSetPinValue+0x22>
    1310:	04 c1       	rjmp	.+520    	; 0x151a <MDIO_VoidSetPinValue+0x22a>
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	88 30       	cpi	r24, 0x08	; 8
    1316:	08 f0       	brcs	.+2      	; 0x131a <MDIO_VoidSetPinValue+0x2a>
    1318:	00 c1       	rjmp	.+512    	; 0x151a <MDIO_VoidSetPinValue+0x22a>
		{

		}
	else
	{
		switch(copy_u8portid)
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	3d 87       	std	Y+13, r19	; 0x0d
    1322:	2c 87       	std	Y+12, r18	; 0x0c
    1324:	8c 85       	ldd	r24, Y+12	; 0x0c
    1326:	9d 85       	ldd	r25, Y+13	; 0x0d
    1328:	81 30       	cpi	r24, 0x01	; 1
    132a:	91 05       	cpc	r25, r1
    132c:	09 f4       	brne	.+2      	; 0x1330 <MDIO_VoidSetPinValue+0x40>
    132e:	4f c0       	rjmp	.+158    	; 0x13ce <MDIO_VoidSetPinValue+0xde>
    1330:	2c 85       	ldd	r18, Y+12	; 0x0c
    1332:	3d 85       	ldd	r19, Y+13	; 0x0d
    1334:	22 30       	cpi	r18, 0x02	; 2
    1336:	31 05       	cpc	r19, r1
    1338:	2c f4       	brge	.+10     	; 0x1344 <MDIO_VoidSetPinValue+0x54>
    133a:	8c 85       	ldd	r24, Y+12	; 0x0c
    133c:	9d 85       	ldd	r25, Y+13	; 0x0d
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	71 f0       	breq	.+28     	; 0x135e <MDIO_VoidSetPinValue+0x6e>
    1342:	eb c0       	rjmp	.+470    	; 0x151a <MDIO_VoidSetPinValue+0x22a>
    1344:	2c 85       	ldd	r18, Y+12	; 0x0c
    1346:	3d 85       	ldd	r19, Y+13	; 0x0d
    1348:	22 30       	cpi	r18, 0x02	; 2
    134a:	31 05       	cpc	r19, r1
    134c:	09 f4       	brne	.+2      	; 0x1350 <MDIO_VoidSetPinValue+0x60>
    134e:	77 c0       	rjmp	.+238    	; 0x143e <MDIO_VoidSetPinValue+0x14e>
    1350:	8c 85       	ldd	r24, Y+12	; 0x0c
    1352:	9d 85       	ldd	r25, Y+13	; 0x0d
    1354:	83 30       	cpi	r24, 0x03	; 3
    1356:	91 05       	cpc	r25, r1
    1358:	09 f4       	brne	.+2      	; 0x135c <MDIO_VoidSetPinValue+0x6c>
    135a:	a9 c0       	rjmp	.+338    	; 0x14ae <MDIO_VoidSetPinValue+0x1be>
    135c:	de c0       	rjmp	.+444    	; 0x151a <MDIO_VoidSetPinValue+0x22a>
		{
		case DIO_U8_PORTA:
			switch(copy_u8pinValue)
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	3b 87       	std	Y+11, r19	; 0x0b
    1366:	2a 87       	std	Y+10, r18	; 0x0a
    1368:	8a 85       	ldd	r24, Y+10	; 0x0a
    136a:	9b 85       	ldd	r25, Y+11	; 0x0b
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	d1 f0       	breq	.+52     	; 0x13a4 <MDIO_VoidSetPinValue+0xb4>
    1370:	2a 85       	ldd	r18, Y+10	; 0x0a
    1372:	3b 85       	ldd	r19, Y+11	; 0x0b
    1374:	21 30       	cpi	r18, 0x01	; 1
    1376:	31 05       	cpc	r19, r1
    1378:	09 f0       	breq	.+2      	; 0x137c <MDIO_VoidSetPinValue+0x8c>
    137a:	cf c0       	rjmp	.+414    	; 0x151a <MDIO_VoidSetPinValue+0x22a>
			{
			   case DIO_U8_HIGH: SET_BIT(DIO_U8_PORTA_REG,copy_u8pinid);
    137c:	ab e3       	ldi	r26, 0x3B	; 59
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	eb e3       	ldi	r30, 0x3B	; 59
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	48 2f       	mov	r20, r24
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	02 2e       	mov	r0, r18
    1394:	02 c0       	rjmp	.+4      	; 0x139a <MDIO_VoidSetPinValue+0xaa>
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	0a 94       	dec	r0
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <MDIO_VoidSetPinValue+0xa6>
    139e:	84 2b       	or	r24, r20
    13a0:	8c 93       	st	X, r24
    13a2:	bb c0       	rjmp	.+374    	; 0x151a <MDIO_VoidSetPinValue+0x22a>
			   break;
			   case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTA_REG,copy_u8pinid);
    13a4:	ab e3       	ldi	r26, 0x3B	; 59
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	eb e3       	ldi	r30, 0x3B	; 59
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	48 2f       	mov	r20, r24
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	02 2e       	mov	r0, r18
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <MDIO_VoidSetPinValue+0xd2>
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	0a 94       	dec	r0
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <MDIO_VoidSetPinValue+0xce>
    13c6:	80 95       	com	r24
    13c8:	84 23       	and	r24, r20
    13ca:	8c 93       	st	X, r24
    13cc:	a6 c0       	rjmp	.+332    	; 0x151a <MDIO_VoidSetPinValue+0x22a>
			   break;
			}
			break;

		case DIO_U8_PORTB:
			switch(copy_u8pinValue)
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	39 87       	std	Y+9, r19	; 0x09
    13d6:	28 87       	std	Y+8, r18	; 0x08
    13d8:	88 85       	ldd	r24, Y+8	; 0x08
    13da:	99 85       	ldd	r25, Y+9	; 0x09
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	d1 f0       	breq	.+52     	; 0x1414 <MDIO_VoidSetPinValue+0x124>
    13e0:	28 85       	ldd	r18, Y+8	; 0x08
    13e2:	39 85       	ldd	r19, Y+9	; 0x09
    13e4:	21 30       	cpi	r18, 0x01	; 1
    13e6:	31 05       	cpc	r19, r1
    13e8:	09 f0       	breq	.+2      	; 0x13ec <MDIO_VoidSetPinValue+0xfc>
    13ea:	97 c0       	rjmp	.+302    	; 0x151a <MDIO_VoidSetPinValue+0x22a>
			{
			   case DIO_U8_HIGH: SET_BIT(DIO_U8_PORTB_REG,copy_u8pinid);
    13ec:	a8 e3       	ldi	r26, 0x38	; 56
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e8 e3       	ldi	r30, 0x38	; 56
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	48 2f       	mov	r20, r24
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	02 2e       	mov	r0, r18
    1404:	02 c0       	rjmp	.+4      	; 0x140a <MDIO_VoidSetPinValue+0x11a>
    1406:	88 0f       	add	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	0a 94       	dec	r0
    140c:	e2 f7       	brpl	.-8      	; 0x1406 <MDIO_VoidSetPinValue+0x116>
    140e:	84 2b       	or	r24, r20
    1410:	8c 93       	st	X, r24
    1412:	83 c0       	rjmp	.+262    	; 0x151a <MDIO_VoidSetPinValue+0x22a>
			   break;
			   case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTB_REG,copy_u8pinid);
    1414:	a8 e3       	ldi	r26, 0x38	; 56
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e8 e3       	ldi	r30, 0x38	; 56
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	48 2f       	mov	r20, r24
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	02 2e       	mov	r0, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <MDIO_VoidSetPinValue+0x142>
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	0a 94       	dec	r0
    1434:	e2 f7       	brpl	.-8      	; 0x142e <MDIO_VoidSetPinValue+0x13e>
    1436:	80 95       	com	r24
    1438:	84 23       	and	r24, r20
    143a:	8c 93       	st	X, r24
    143c:	6e c0       	rjmp	.+220    	; 0x151a <MDIO_VoidSetPinValue+0x22a>
			   break;
					}
		    break;
		case DIO_U8_PORTC:
			switch(copy_u8pinValue)
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	3f 83       	std	Y+7, r19	; 0x07
    1446:	2e 83       	std	Y+6, r18	; 0x06
    1448:	8e 81       	ldd	r24, Y+6	; 0x06
    144a:	9f 81       	ldd	r25, Y+7	; 0x07
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	d1 f0       	breq	.+52     	; 0x1484 <MDIO_VoidSetPinValue+0x194>
    1450:	2e 81       	ldd	r18, Y+6	; 0x06
    1452:	3f 81       	ldd	r19, Y+7	; 0x07
    1454:	21 30       	cpi	r18, 0x01	; 1
    1456:	31 05       	cpc	r19, r1
    1458:	09 f0       	breq	.+2      	; 0x145c <MDIO_VoidSetPinValue+0x16c>
    145a:	5f c0       	rjmp	.+190    	; 0x151a <MDIO_VoidSetPinValue+0x22a>
			{
				 case DIO_U8_HIGH: SET_BIT(DIO_U8_PORTC_REG,copy_u8pinid);
    145c:	a5 e3       	ldi	r26, 0x35	; 53
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e5 e3       	ldi	r30, 0x35	; 53
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	48 2f       	mov	r20, r24
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	02 2e       	mov	r0, r18
    1474:	02 c0       	rjmp	.+4      	; 0x147a <MDIO_VoidSetPinValue+0x18a>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	0a 94       	dec	r0
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <MDIO_VoidSetPinValue+0x186>
    147e:	84 2b       	or	r24, r20
    1480:	8c 93       	st	X, r24
    1482:	4b c0       	rjmp	.+150    	; 0x151a <MDIO_VoidSetPinValue+0x22a>
				 break;
				 case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTC_REG,copy_u8pinid);
    1484:	a5 e3       	ldi	r26, 0x35	; 53
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e5 e3       	ldi	r30, 0x35	; 53
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	48 2f       	mov	r20, r24
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 2e       	mov	r0, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <MDIO_VoidSetPinValue+0x1b2>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	0a 94       	dec	r0
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <MDIO_VoidSetPinValue+0x1ae>
    14a6:	80 95       	com	r24
    14a8:	84 23       	and	r24, r20
    14aa:	8c 93       	st	X, r24
    14ac:	36 c0       	rjmp	.+108    	; 0x151a <MDIO_VoidSetPinValue+0x22a>
				 break;
				}
							break;
			case DIO_U8_PORTD:
					switch(copy_u8pinValue)
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	3d 83       	std	Y+5, r19	; 0x05
    14b6:	2c 83       	std	Y+4, r18	; 0x04
    14b8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ba:	9d 81       	ldd	r25, Y+5	; 0x05
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	c9 f0       	breq	.+50     	; 0x14f2 <MDIO_VoidSetPinValue+0x202>
    14c0:	2c 81       	ldd	r18, Y+4	; 0x04
    14c2:	3d 81       	ldd	r19, Y+5	; 0x05
    14c4:	21 30       	cpi	r18, 0x01	; 1
    14c6:	31 05       	cpc	r19, r1
    14c8:	41 f5       	brne	.+80     	; 0x151a <MDIO_VoidSetPinValue+0x22a>
					{
					   case DIO_U8_HIGH: SET_BIT(DIO_U8_PORTD_REG,copy_u8pinid);
    14ca:	a2 e3       	ldi	r26, 0x32	; 50
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e2 e3       	ldi	r30, 0x32	; 50
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	48 2f       	mov	r20, r24
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	02 2e       	mov	r0, r18
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <MDIO_VoidSetPinValue+0x1f8>
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	0a 94       	dec	r0
    14ea:	e2 f7       	brpl	.-8      	; 0x14e4 <MDIO_VoidSetPinValue+0x1f4>
    14ec:	84 2b       	or	r24, r20
    14ee:	8c 93       	st	X, r24
    14f0:	14 c0       	rjmp	.+40     	; 0x151a <MDIO_VoidSetPinValue+0x22a>
					   break;
					   case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTD_REG,copy_u8pinid);
    14f2:	a2 e3       	ldi	r26, 0x32	; 50
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e2 e3       	ldi	r30, 0x32	; 50
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	48 2f       	mov	r20, r24
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 2e       	mov	r0, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <MDIO_VoidSetPinValue+0x220>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	0a 94       	dec	r0
    1512:	e2 f7       	brpl	.-8      	; 0x150c <MDIO_VoidSetPinValue+0x21c>
    1514:	80 95       	com	r24
    1516:	84 23       	and	r24, r20
    1518:	8c 93       	st	X, r24
					}
					break;
		}
		}

	}
    151a:	2d 96       	adiw	r28, 0x0d	; 13
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	f8 94       	cli
    1520:	de bf       	out	0x3e, r29	; 62
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	cd bf       	out	0x3d, r28	; 61
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	08 95       	ret

0000152c <MDIO_U8GetPinValue>:
/*---------------------------------------------------------------------------------------------------------------------------*/
u8 MDIO_U8GetPinValue(u8 copy_u8portid,u8 copy_u8pinid)
{
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	00 d0       	rcall	.+0      	; 0x1532 <MDIO_U8GetPinValue+0x6>
    1532:	00 d0       	rcall	.+0      	; 0x1534 <MDIO_U8GetPinValue+0x8>
    1534:	0f 92       	push	r0
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	8a 83       	std	Y+2, r24	; 0x02
    153c:	6b 83       	std	Y+3, r22	; 0x03
	u8 result=0;
    153e:	19 82       	std	Y+1, r1	; 0x01
	if( (copy_u8portid > DIO_U8_PORTD) || (copy_u8portid < DIO_U8_PORTA)|| (copy_u8pinid > DIO_U8_PIN7) || (copy_u8pinid < DIO_U8_PIN0) )
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	84 30       	cpi	r24, 0x04	; 4
    1544:	08 f0       	brcs	.+2      	; 0x1548 <MDIO_U8GetPinValue+0x1c>
    1546:	6b c0       	rjmp	.+214    	; 0x161e <MDIO_U8GetPinValue+0xf2>
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	88 30       	cpi	r24, 0x08	; 8
    154c:	08 f0       	brcs	.+2      	; 0x1550 <MDIO_U8GetPinValue+0x24>
    154e:	67 c0       	rjmp	.+206    	; 0x161e <MDIO_U8GetPinValue+0xf2>
			{

			}
		else
		{
			switch(copy_u8portid)
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	3d 83       	std	Y+5, r19	; 0x05
    1558:	2c 83       	std	Y+4, r18	; 0x04
    155a:	4c 81       	ldd	r20, Y+4	; 0x04
    155c:	5d 81       	ldd	r21, Y+5	; 0x05
    155e:	41 30       	cpi	r20, 0x01	; 1
    1560:	51 05       	cpc	r21, r1
    1562:	41 f1       	breq	.+80     	; 0x15b4 <MDIO_U8GetPinValue+0x88>
    1564:	8c 81       	ldd	r24, Y+4	; 0x04
    1566:	9d 81       	ldd	r25, Y+5	; 0x05
    1568:	82 30       	cpi	r24, 0x02	; 2
    156a:	91 05       	cpc	r25, r1
    156c:	34 f4       	brge	.+12     	; 0x157a <MDIO_U8GetPinValue+0x4e>
    156e:	2c 81       	ldd	r18, Y+4	; 0x04
    1570:	3d 81       	ldd	r19, Y+5	; 0x05
    1572:	21 15       	cp	r18, r1
    1574:	31 05       	cpc	r19, r1
    1576:	61 f0       	breq	.+24     	; 0x1590 <MDIO_U8GetPinValue+0x64>
    1578:	52 c0       	rjmp	.+164    	; 0x161e <MDIO_U8GetPinValue+0xf2>
    157a:	4c 81       	ldd	r20, Y+4	; 0x04
    157c:	5d 81       	ldd	r21, Y+5	; 0x05
    157e:	42 30       	cpi	r20, 0x02	; 2
    1580:	51 05       	cpc	r21, r1
    1582:	51 f1       	breq	.+84     	; 0x15d8 <MDIO_U8GetPinValue+0xac>
    1584:	8c 81       	ldd	r24, Y+4	; 0x04
    1586:	9d 81       	ldd	r25, Y+5	; 0x05
    1588:	83 30       	cpi	r24, 0x03	; 3
    158a:	91 05       	cpc	r25, r1
    158c:	b9 f1       	breq	.+110    	; 0x15fc <MDIO_U8GetPinValue+0xd0>
    158e:	47 c0       	rjmp	.+142    	; 0x161e <MDIO_U8GetPinValue+0xf2>
			{
			case DIO_U8_PORTA:
				   result= GET_BIT(DIO_U8_PINA_REG,copy_u8pinid);
    1590:	e9 e3       	ldi	r30, 0x39	; 57
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	88 2f       	mov	r24, r24
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	a9 01       	movw	r20, r18
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <MDIO_U8GetPinValue+0x7c>
    15a4:	55 95       	asr	r21
    15a6:	47 95       	ror	r20
    15a8:	8a 95       	dec	r24
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <MDIO_U8GetPinValue+0x78>
    15ac:	ca 01       	movw	r24, r20
    15ae:	81 70       	andi	r24, 0x01	; 1
    15b0:	89 83       	std	Y+1, r24	; 0x01
    15b2:	35 c0       	rjmp	.+106    	; 0x161e <MDIO_U8GetPinValue+0xf2>
				   break;

			case DIO_U8_PORTB:
				   result= GET_BIT(DIO_U8_PINB_REG,copy_u8pinid);
    15b4:	e6 e3       	ldi	r30, 0x36	; 54
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	88 2f       	mov	r24, r24
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	a9 01       	movw	r20, r18
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <MDIO_U8GetPinValue+0xa0>
    15c8:	55 95       	asr	r21
    15ca:	47 95       	ror	r20
    15cc:	8a 95       	dec	r24
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <MDIO_U8GetPinValue+0x9c>
    15d0:	ca 01       	movw	r24, r20
    15d2:	81 70       	andi	r24, 0x01	; 1
    15d4:	89 83       	std	Y+1, r24	; 0x01
    15d6:	23 c0       	rjmp	.+70     	; 0x161e <MDIO_U8GetPinValue+0xf2>
				   break;

			case DIO_U8_PORTC:
			       result= GET_BIT(DIO_U8_PINC_REG,copy_u8pinid);
    15d8:	e3 e3       	ldi	r30, 0x33	; 51
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	88 2f       	mov	r24, r24
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	a9 01       	movw	r20, r18
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <MDIO_U8GetPinValue+0xc4>
    15ec:	55 95       	asr	r21
    15ee:	47 95       	ror	r20
    15f0:	8a 95       	dec	r24
    15f2:	e2 f7       	brpl	.-8      	; 0x15ec <MDIO_U8GetPinValue+0xc0>
    15f4:	ca 01       	movw	r24, r20
    15f6:	81 70       	andi	r24, 0x01	; 1
    15f8:	89 83       	std	Y+1, r24	; 0x01
    15fa:	11 c0       	rjmp	.+34     	; 0x161e <MDIO_U8GetPinValue+0xf2>
				   break;
				case DIO_U8_PORTD:
				   result= GET_BIT(DIO_U8_PIND_REG,copy_u8pinid);
    15fc:	e0 e3       	ldi	r30, 0x30	; 48
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	88 2f       	mov	r24, r24
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	a9 01       	movw	r20, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <MDIO_U8GetPinValue+0xe8>
    1610:	55 95       	asr	r21
    1612:	47 95       	ror	r20
    1614:	8a 95       	dec	r24
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <MDIO_U8GetPinValue+0xe4>
    1618:	ca 01       	movw	r24, r20
    161a:	81 70       	andi	r24, 0x01	; 1
    161c:	89 83       	std	Y+1, r24	; 0x01
				   break;
			}
			}
	return result;
    161e:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <MDIO_VoidSetPortDirection>:
/*---------------------------------------------------------------------------------------------------------------------------*/
void MDIO_VoidSetPortDirection(u8 copy_u8portid,u8 copy_u8portdirection)
{
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	00 d0       	rcall	.+0      	; 0x1636 <MDIO_VoidSetPortDirection+0x6>
    1636:	00 d0       	rcall	.+0      	; 0x1638 <MDIO_VoidSetPortDirection+0x8>
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	89 83       	std	Y+1, r24	; 0x01
    163e:	6a 83       	std	Y+2, r22	; 0x02
	if( (copy_u8portid > DIO_U8_PORTD) || (copy_u8portid < DIO_U8_PORTA))
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	84 30       	cpi	r24, 0x04	; 4
    1644:	90 f5       	brcc	.+100    	; 0x16aa <MDIO_VoidSetPortDirection+0x7a>
			{

			}
		else
		{
			switch(copy_u8portid)
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	3c 83       	std	Y+4, r19	; 0x04
    164e:	2b 83       	std	Y+3, r18	; 0x03
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	9c 81       	ldd	r25, Y+4	; 0x04
    1654:	81 30       	cpi	r24, 0x01	; 1
    1656:	91 05       	cpc	r25, r1
    1658:	d1 f0       	breq	.+52     	; 0x168e <MDIO_VoidSetPortDirection+0x5e>
    165a:	2b 81       	ldd	r18, Y+3	; 0x03
    165c:	3c 81       	ldd	r19, Y+4	; 0x04
    165e:	22 30       	cpi	r18, 0x02	; 2
    1660:	31 05       	cpc	r19, r1
    1662:	2c f4       	brge	.+10     	; 0x166e <MDIO_VoidSetPortDirection+0x3e>
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	9c 81       	ldd	r25, Y+4	; 0x04
    1668:	00 97       	sbiw	r24, 0x00	; 0
    166a:	61 f0       	breq	.+24     	; 0x1684 <MDIO_VoidSetPortDirection+0x54>
    166c:	1e c0       	rjmp	.+60     	; 0x16aa <MDIO_VoidSetPortDirection+0x7a>
    166e:	2b 81       	ldd	r18, Y+3	; 0x03
    1670:	3c 81       	ldd	r19, Y+4	; 0x04
    1672:	22 30       	cpi	r18, 0x02	; 2
    1674:	31 05       	cpc	r19, r1
    1676:	81 f0       	breq	.+32     	; 0x1698 <MDIO_VoidSetPortDirection+0x68>
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	9c 81       	ldd	r25, Y+4	; 0x04
    167c:	83 30       	cpi	r24, 0x03	; 3
    167e:	91 05       	cpc	r25, r1
    1680:	81 f0       	breq	.+32     	; 0x16a2 <MDIO_VoidSetPortDirection+0x72>
    1682:	13 c0       	rjmp	.+38     	; 0x16aa <MDIO_VoidSetPortDirection+0x7a>
			{
			case DIO_U8_PORTA:
				SET_BYTE(DIO_U8_DDRA_REG,copy_u8portdirection);
    1684:	ea e3       	ldi	r30, 0x3A	; 58
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	80 83       	st	Z, r24
    168c:	0e c0       	rjmp	.+28     	; 0x16aa <MDIO_VoidSetPortDirection+0x7a>
				break;
			case DIO_U8_PORTB:
				SET_BYTE(DIO_U8_DDRB_REG,copy_u8portdirection);
    168e:	e7 e3       	ldi	r30, 0x37	; 55
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	80 83       	st	Z, r24
    1696:	09 c0       	rjmp	.+18     	; 0x16aa <MDIO_VoidSetPortDirection+0x7a>
				break;
			case DIO_U8_PORTC:
				SET_BYTE(DIO_U8_DDRC_REG,copy_u8portdirection);
    1698:	e4 e3       	ldi	r30, 0x34	; 52
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	80 83       	st	Z, r24
    16a0:	04 c0       	rjmp	.+8      	; 0x16aa <MDIO_VoidSetPortDirection+0x7a>
				break;
			case DIO_U8_PORTD:
				SET_BYTE(DIO_U8_DDRD_REG,copy_u8portdirection);
    16a2:	e1 e3       	ldi	r30, 0x31	; 49
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	80 83       	st	Z, r24
				break;
			}
			}
	}
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	08 95       	ret

000016b8 <MDIO_VoidSetPortValue>:
/*---------------------------------------------------------------------------------------------------------------------------*/
void MDIO_VoidSetPortValue(u8 copy_u8portid,u8 copy_u8portValue)
{
    16b8:	df 93       	push	r29
    16ba:	cf 93       	push	r28
    16bc:	00 d0       	rcall	.+0      	; 0x16be <MDIO_VoidSetPortValue+0x6>
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <MDIO_VoidSetPortValue+0x8>
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
    16c4:	89 83       	std	Y+1, r24	; 0x01
    16c6:	6a 83       	std	Y+2, r22	; 0x02

		if( (copy_u8portid > DIO_U8_PORTD) || (copy_u8portid < DIO_U8_PORTA) )
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	84 30       	cpi	r24, 0x04	; 4
    16cc:	90 f5       	brcc	.+100    	; 0x1732 <MDIO_VoidSetPortValue+0x7a>
				{

				}
			else
			{
				switch(copy_u8portid)
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	3c 83       	std	Y+4, r19	; 0x04
    16d6:	2b 83       	std	Y+3, r18	; 0x03
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	9c 81       	ldd	r25, Y+4	; 0x04
    16dc:	81 30       	cpi	r24, 0x01	; 1
    16de:	91 05       	cpc	r25, r1
    16e0:	d1 f0       	breq	.+52     	; 0x1716 <MDIO_VoidSetPortValue+0x5e>
    16e2:	2b 81       	ldd	r18, Y+3	; 0x03
    16e4:	3c 81       	ldd	r19, Y+4	; 0x04
    16e6:	22 30       	cpi	r18, 0x02	; 2
    16e8:	31 05       	cpc	r19, r1
    16ea:	2c f4       	brge	.+10     	; 0x16f6 <MDIO_VoidSetPortValue+0x3e>
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	9c 81       	ldd	r25, Y+4	; 0x04
    16f0:	00 97       	sbiw	r24, 0x00	; 0
    16f2:	61 f0       	breq	.+24     	; 0x170c <MDIO_VoidSetPortValue+0x54>
    16f4:	1e c0       	rjmp	.+60     	; 0x1732 <MDIO_VoidSetPortValue+0x7a>
    16f6:	2b 81       	ldd	r18, Y+3	; 0x03
    16f8:	3c 81       	ldd	r19, Y+4	; 0x04
    16fa:	22 30       	cpi	r18, 0x02	; 2
    16fc:	31 05       	cpc	r19, r1
    16fe:	81 f0       	breq	.+32     	; 0x1720 <MDIO_VoidSetPortValue+0x68>
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	9c 81       	ldd	r25, Y+4	; 0x04
    1704:	83 30       	cpi	r24, 0x03	; 3
    1706:	91 05       	cpc	r25, r1
    1708:	81 f0       	breq	.+32     	; 0x172a <MDIO_VoidSetPortValue+0x72>
    170a:	13 c0       	rjmp	.+38     	; 0x1732 <MDIO_VoidSetPortValue+0x7a>
				{
				case DIO_U8_PORTA:
					    SET_BYTE(DIO_U8_PORTA_REG,copy_u8portValue);
    170c:	eb e3       	ldi	r30, 0x3B	; 59
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	80 83       	st	Z, r24
    1714:	0e c0       	rjmp	.+28     	; 0x1732 <MDIO_VoidSetPortValue+0x7a>
					   break;

				case DIO_U8_PORTB:
					    SET_BYTE(DIO_U8_PORTB_REG,copy_u8portValue);
    1716:	e8 e3       	ldi	r30, 0x38	; 56
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	80 83       	st	Z, r24
    171e:	09 c0       	rjmp	.+18     	; 0x1732 <MDIO_VoidSetPortValue+0x7a>
					   break;

				case DIO_U8_PORTC:
				        SET_BYTE(DIO_U8_PORTC_REG,copy_u8portValue);
    1720:	e5 e3       	ldi	r30, 0x35	; 53
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	80 83       	st	Z, r24
    1728:	04 c0       	rjmp	.+8      	; 0x1732 <MDIO_VoidSetPortValue+0x7a>
					   break;
					case DIO_U8_PORTD:
					   SET_BYTE(DIO_U8_PORTD_REG,copy_u8portValue);
    172a:	e2 e3       	ldi	r30, 0x32	; 50
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	80 83       	st	Z, r24
					   break;
				}
				}

	}
    1732:	0f 90       	pop	r0
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	08 95       	ret

00001740 <MGI_u8_voidInit>:
#include "../Include/MCAL/GLOBAL_INTERRUPT/GI_Interface.h"
#include "../Include/MCAL/GLOBAL_INTERRUPT/GI_Private.h"
#include "../Include/MCAL/GLOBAL_INTERRUPT/GI_Cfg.h"

void MGI_u8_voidInit(void)
{
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
#if MGI_u8_INITIAL_ENABLE == MGI_u8_ENABLE
	SET_BIT(GI,MGI_u8_INTERRUPT_ENABLE_BIT);
#else
	CLR_BIT(GI,MGI_u8_INTERRUPT_ENABLE_BIT);
    1748:	af e5       	ldi	r26, 0x5F	; 95
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	ef e5       	ldi	r30, 0x5F	; 95
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	8f 77       	andi	r24, 0x7F	; 127
    1754:	8c 93       	st	X, r24
#endif
}
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	08 95       	ret

0000175c <MGI_voidEnable>:

void MGI_voidEnable(void)
{
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GI,MGI_u8_INTERRUPT_ENABLE_BIT);
    1764:	af e5       	ldi	r26, 0x5F	; 95
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	ef e5       	ldi	r30, 0x5F	; 95
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	80 68       	ori	r24, 0x80	; 128
    1770:	8c 93       	st	X, r24
}
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	08 95       	ret

00001778 <MGI_voidDisable>:

void MGI_voidDisable(void)
{
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GI,MGI_u8_INTERRUPT_ENABLE_BIT);
    1780:	af e5       	ldi	r26, 0x5F	; 95
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	ef e5       	ldi	r30, 0x5F	; 95
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	8f 77       	andi	r24, 0x7F	; 127
    178c:	8c 93       	st	X, r24
}
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <HKEYPAD_u8_GetPressedKey>:
u8 KEYPAD_Au8RowsPins [KEYPAD_u8_ROW_NUM] = KEYPAD_Au8ROWS;
u8 KEYPAD_Au8ColsPins [KEYPAD_u8_COL_NUM] = KEYPAD_Au8COLS;


u8 HKEYPAD_u8_GetPressedKey (void)
{
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
    179c:	63 97       	sbiw	r28, 0x13	; 19
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	f8 94       	cli
    17a2:	de bf       	out	0x3e, r29	; 62
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	cd bf       	out	0x3d, r28	; 61

	u8 local_u8RowCounter,local_u8ColCounter,local_u8PinValue,local_u8KeyValue= KEYPAD_u8_KEY_NOT_PRESSED;
    17a8:	8f ef       	ldi	r24, 0xFF	; 255
    17aa:	88 8b       	std	Y+16, r24	; 0x10
    u8 local_u8Flag = KEYPAD_u8_FLAG_DOWN;
    17ac:	1f 86       	std	Y+15, r1	; 0x0f

	for(local_u8RowCounter=0;local_u8RowCounter<KEYPAD_u8_ROW_NUM;local_u8RowCounter++)
    17ae:	1b 8a       	std	Y+19, r1	; 0x13
    17b0:	dd c0       	rjmp	.+442    	; 0x196c <HKEYPAD_u8_GetPressedKey+0x1d8>
		{
			MDIO_VoidSetPinValue(KEYPAD_u8_PORT,KEYPAD_Au8RowsPins[local_u8RowCounter],DIO_U8_LOW);
    17b2:	8b 89       	ldd	r24, Y+19	; 0x13
    17b4:	88 2f       	mov	r24, r24
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	fc 01       	movw	r30, r24
    17ba:	e7 53       	subi	r30, 0x37	; 55
    17bc:	ff 4f       	sbci	r31, 0xFF	; 255
    17be:	90 81       	ld	r25, Z
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	69 2f       	mov	r22, r25
    17c4:	40 e0       	ldi	r20, 0x00	; 0
    17c6:	0e 94 78 09 	call	0x12f0	; 0x12f0 <MDIO_VoidSetPinValue>

			for(local_u8ColCounter=0;local_u8ColCounter<KEYPAD_u8_COL_NUM;local_u8ColCounter++)
    17ca:	1a 8a       	std	Y+18, r1	; 0x12
    17cc:	b9 c0       	rjmp	.+370    	; 0x1940 <HKEYPAD_u8_GetPressedKey+0x1ac>
			{
				local_u8PinValue =MDIO_U8GetPinValue(KEYPAD_u8_PORT,KEYPAD_Au8ColsPins[local_u8ColCounter]);
    17ce:	8a 89       	ldd	r24, Y+18	; 0x12
    17d0:	88 2f       	mov	r24, r24
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	fc 01       	movw	r30, r24
    17d6:	e3 53       	subi	r30, 0x33	; 51
    17d8:	ff 4f       	sbci	r31, 0xFF	; 255
    17da:	90 81       	ld	r25, Z
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	69 2f       	mov	r22, r25
    17e0:	0e 94 96 0a 	call	0x152c	; 0x152c <MDIO_U8GetPinValue>
    17e4:	89 8b       	std	Y+17, r24	; 0x11
				if(local_u8PinValue==DIO_U8_LOW)
    17e6:	89 89       	ldd	r24, Y+17	; 0x11
    17e8:	88 23       	and	r24, r24
    17ea:	09 f0       	breq	.+2      	; 0x17ee <HKEYPAD_u8_GetPressedKey+0x5a>
    17ec:	a6 c0       	rjmp	.+332    	; 0x193a <HKEYPAD_u8_GetPressedKey+0x1a6>
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	a0 ea       	ldi	r26, 0xA0	; 160
    17f4:	b1 e4       	ldi	r27, 0x41	; 65
    17f6:	8b 87       	std	Y+11, r24	; 0x0b
    17f8:	9c 87       	std	Y+12, r25	; 0x0c
    17fa:	ad 87       	std	Y+13, r26	; 0x0d
    17fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1800:	7c 85       	ldd	r23, Y+12	; 0x0c
    1802:	8d 85       	ldd	r24, Y+13	; 0x0d
    1804:	9e 85       	ldd	r25, Y+14	; 0x0e
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	4a ef       	ldi	r20, 0xFA	; 250
    180c:	54 e4       	ldi	r21, 0x44	; 68
    180e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	8f 83       	std	Y+7, r24	; 0x07
    1818:	98 87       	std	Y+8, r25	; 0x08
    181a:	a9 87       	std	Y+9, r26	; 0x09
    181c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    181e:	6f 81       	ldd	r22, Y+7	; 0x07
    1820:	78 85       	ldd	r23, Y+8	; 0x08
    1822:	89 85       	ldd	r24, Y+9	; 0x09
    1824:	9a 85       	ldd	r25, Y+10	; 0x0a
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	40 e8       	ldi	r20, 0x80	; 128
    182c:	5f e3       	ldi	r21, 0x3F	; 63
    182e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1832:	88 23       	and	r24, r24
    1834:	2c f4       	brge	.+10     	; 0x1840 <HKEYPAD_u8_GetPressedKey+0xac>
		__ticks = 1;
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	9e 83       	std	Y+6, r25	; 0x06
    183c:	8d 83       	std	Y+5, r24	; 0x05
    183e:	3f c0       	rjmp	.+126    	; 0x18be <HKEYPAD_u8_GetPressedKey+0x12a>
	else if (__tmp > 65535)
    1840:	6f 81       	ldd	r22, Y+7	; 0x07
    1842:	78 85       	ldd	r23, Y+8	; 0x08
    1844:	89 85       	ldd	r24, Y+9	; 0x09
    1846:	9a 85       	ldd	r25, Y+10	; 0x0a
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	3f ef       	ldi	r19, 0xFF	; 255
    184c:	4f e7       	ldi	r20, 0x7F	; 127
    184e:	57 e4       	ldi	r21, 0x47	; 71
    1850:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1854:	18 16       	cp	r1, r24
    1856:	4c f5       	brge	.+82     	; 0x18aa <HKEYPAD_u8_GetPressedKey+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1858:	6b 85       	ldd	r22, Y+11	; 0x0b
    185a:	7c 85       	ldd	r23, Y+12	; 0x0c
    185c:	8d 85       	ldd	r24, Y+13	; 0x0d
    185e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	40 e2       	ldi	r20, 0x20	; 32
    1866:	51 e4       	ldi	r21, 0x41	; 65
    1868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	bc 01       	movw	r22, r24
    1872:	cd 01       	movw	r24, r26
    1874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	9e 83       	std	Y+6, r25	; 0x06
    187e:	8d 83       	std	Y+5, r24	; 0x05
    1880:	0f c0       	rjmp	.+30     	; 0x18a0 <HKEYPAD_u8_GetPressedKey+0x10c>
    1882:	88 ec       	ldi	r24, 0xC8	; 200
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	9c 83       	std	Y+4, r25	; 0x04
    1888:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	9c 81       	ldd	r25, Y+4	; 0x04
    188e:	01 97       	sbiw	r24, 0x01	; 1
    1890:	f1 f7       	brne	.-4      	; 0x188e <HKEYPAD_u8_GetPressedKey+0xfa>
    1892:	9c 83       	std	Y+4, r25	; 0x04
    1894:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1896:	8d 81       	ldd	r24, Y+5	; 0x05
    1898:	9e 81       	ldd	r25, Y+6	; 0x06
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	9e 83       	std	Y+6, r25	; 0x06
    189e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a0:	8d 81       	ldd	r24, Y+5	; 0x05
    18a2:	9e 81       	ldd	r25, Y+6	; 0x06
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	69 f7       	brne	.-38     	; 0x1882 <HKEYPAD_u8_GetPressedKey+0xee>
    18a8:	14 c0       	rjmp	.+40     	; 0x18d2 <HKEYPAD_u8_GetPressedKey+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18aa:	6f 81       	ldd	r22, Y+7	; 0x07
    18ac:	78 85       	ldd	r23, Y+8	; 0x08
    18ae:	89 85       	ldd	r24, Y+9	; 0x09
    18b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	9e 83       	std	Y+6, r25	; 0x06
    18bc:	8d 83       	std	Y+5, r24	; 0x05
    18be:	8d 81       	ldd	r24, Y+5	; 0x05
    18c0:	9e 81       	ldd	r25, Y+6	; 0x06
    18c2:	9a 83       	std	Y+2, r25	; 0x02
    18c4:	89 83       	std	Y+1, r24	; 0x01
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	f1 f7       	brne	.-4      	; 0x18ca <HKEYPAD_u8_GetPressedKey+0x136>
    18ce:	9a 83       	std	Y+2, r25	; 0x02
    18d0:	89 83       	std	Y+1, r24	; 0x01
				{
					_delay_ms(KEYPAD_u8_DEBOUNCING);
					local_u8PinValue= MDIO_U8GetPinValue(KEYPAD_u8_PORT,KEYPAD_Au8ColsPins[local_u8ColCounter]);
    18d2:	8a 89       	ldd	r24, Y+18	; 0x12
    18d4:	88 2f       	mov	r24, r24
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	fc 01       	movw	r30, r24
    18da:	e3 53       	subi	r30, 0x33	; 51
    18dc:	ff 4f       	sbci	r31, 0xFF	; 255
    18de:	90 81       	ld	r25, Z
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	69 2f       	mov	r22, r25
    18e4:	0e 94 96 0a 	call	0x152c	; 0x152c <MDIO_U8GetPinValue>
    18e8:	89 8b       	std	Y+17, r24	; 0x11
					if(local_u8PinValue==DIO_U8_LOW)
    18ea:	89 89       	ldd	r24, Y+17	; 0x11
    18ec:	88 23       	and	r24, r24
    18ee:	29 f5       	brne	.+74     	; 0x193a <HKEYPAD_u8_GetPressedKey+0x1a6>
    18f0:	0c c0       	rjmp	.+24     	; 0x190a <HKEYPAD_u8_GetPressedKey+0x176>
					{
					while(local_u8PinValue==DIO_U8_LOW)
					{
						local_u8PinValue=MDIO_U8GetPinValue(KEYPAD_u8_PORT,KEYPAD_Au8ColsPins[local_u8ColCounter]);
    18f2:	8a 89       	ldd	r24, Y+18	; 0x12
    18f4:	88 2f       	mov	r24, r24
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	fc 01       	movw	r30, r24
    18fa:	e3 53       	subi	r30, 0x33	; 51
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	90 81       	ld	r25, Z
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	69 2f       	mov	r22, r25
    1904:	0e 94 96 0a 	call	0x152c	; 0x152c <MDIO_U8GetPinValue>
    1908:	89 8b       	std	Y+17, r24	; 0x11
				{
					_delay_ms(KEYPAD_u8_DEBOUNCING);
					local_u8PinValue= MDIO_U8GetPinValue(KEYPAD_u8_PORT,KEYPAD_Au8ColsPins[local_u8ColCounter]);
					if(local_u8PinValue==DIO_U8_LOW)
					{
					while(local_u8PinValue==DIO_U8_LOW)
    190a:	89 89       	ldd	r24, Y+17	; 0x11
    190c:	88 23       	and	r24, r24
    190e:	89 f3       	breq	.-30     	; 0x18f2 <HKEYPAD_u8_GetPressedKey+0x15e>
					{
						local_u8PinValue=MDIO_U8GetPinValue(KEYPAD_u8_PORT,KEYPAD_Au8ColsPins[local_u8ColCounter]);
					}
					local_u8KeyValue=KEYPAD_Au8Keys[local_u8RowCounter][local_u8ColCounter];
    1910:	8b 89       	ldd	r24, Y+19	; 0x13
    1912:	48 2f       	mov	r20, r24
    1914:	50 e0       	ldi	r21, 0x00	; 0
    1916:	8a 89       	ldd	r24, Y+18	; 0x12
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	ca 01       	movw	r24, r20
    191e:	88 0f       	add	r24, r24
    1920:	99 1f       	adc	r25, r25
    1922:	88 0f       	add	r24, r24
    1924:	99 1f       	adc	r25, r25
    1926:	82 0f       	add	r24, r18
    1928:	93 1f       	adc	r25, r19
    192a:	fc 01       	movw	r30, r24
    192c:	e7 54       	subi	r30, 0x47	; 71
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	80 81       	ld	r24, Z
    1932:	88 8b       	std	Y+16, r24	; 0x10
					local_u8Flag=KEYPAD_u8_FLAG_UP;
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	8f 87       	std	Y+15, r24	; 0x0f
    1938:	07 c0       	rjmp	.+14     	; 0x1948 <HKEYPAD_u8_GetPressedKey+0x1b4>

	for(local_u8RowCounter=0;local_u8RowCounter<KEYPAD_u8_ROW_NUM;local_u8RowCounter++)
		{
			MDIO_VoidSetPinValue(KEYPAD_u8_PORT,KEYPAD_Au8RowsPins[local_u8RowCounter],DIO_U8_LOW);

			for(local_u8ColCounter=0;local_u8ColCounter<KEYPAD_u8_COL_NUM;local_u8ColCounter++)
    193a:	8a 89       	ldd	r24, Y+18	; 0x12
    193c:	8f 5f       	subi	r24, 0xFF	; 255
    193e:	8a 8b       	std	Y+18, r24	; 0x12
    1940:	8a 89       	ldd	r24, Y+18	; 0x12
    1942:	84 30       	cpi	r24, 0x04	; 4
    1944:	08 f4       	brcc	.+2      	; 0x1948 <HKEYPAD_u8_GetPressedKey+0x1b4>
    1946:	43 cf       	rjmp	.-378    	; 0x17ce <HKEYPAD_u8_GetPressedKey+0x3a>
					break;
					}
				}
			}

			    MDIO_VoidSetPinValue(KEYPAD_u8_PORT,KEYPAD_Au8RowsPins[local_u8RowCounter], DIO_U8_HIGH);
    1948:	8b 89       	ldd	r24, Y+19	; 0x13
    194a:	88 2f       	mov	r24, r24
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	fc 01       	movw	r30, r24
    1950:	e7 53       	subi	r30, 0x37	; 55
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	90 81       	ld	r25, Z
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	69 2f       	mov	r22, r25
    195a:	41 e0       	ldi	r20, 0x01	; 1
    195c:	0e 94 78 09 	call	0x12f0	; 0x12f0 <MDIO_VoidSetPinValue>
			    if(local_u8Flag==KEYPAD_u8_FLAG_UP)
    1960:	8f 85       	ldd	r24, Y+15	; 0x0f
    1962:	81 30       	cpi	r24, 0x01	; 1
    1964:	39 f0       	breq	.+14     	; 0x1974 <HKEYPAD_u8_GetPressedKey+0x1e0>
{

	u8 local_u8RowCounter,local_u8ColCounter,local_u8PinValue,local_u8KeyValue= KEYPAD_u8_KEY_NOT_PRESSED;
    u8 local_u8Flag = KEYPAD_u8_FLAG_DOWN;

	for(local_u8RowCounter=0;local_u8RowCounter<KEYPAD_u8_ROW_NUM;local_u8RowCounter++)
    1966:	8b 89       	ldd	r24, Y+19	; 0x13
    1968:	8f 5f       	subi	r24, 0xFF	; 255
    196a:	8b 8b       	std	Y+19, r24	; 0x13
    196c:	8b 89       	ldd	r24, Y+19	; 0x13
    196e:	84 30       	cpi	r24, 0x04	; 4
    1970:	08 f4       	brcc	.+2      	; 0x1974 <HKEYPAD_u8_GetPressedKey+0x1e0>
    1972:	1f cf       	rjmp	.-450    	; 0x17b2 <HKEYPAD_u8_GetPressedKey+0x1e>
			    {
			    	break;
			    }
		}

	return local_u8KeyValue;
    1974:	88 89       	ldd	r24, Y+16	; 0x10
}
    1976:	63 96       	adiw	r28, 0x13	; 19
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	f8 94       	cli
    197c:	de bf       	out	0x3e, r29	; 62
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	cd bf       	out	0x3d, r28	; 61
    1982:	cf 91       	pop	r28
    1984:	df 91       	pop	r29
    1986:	08 95       	ret

00001988 <HLCD_SendCommand>:
		  0x01,
		  0x01,
		  0x01,
		  0x1F};
void HLCD_SendCommand(u8 copy_u8_command)
{
    1988:	df 93       	push	r29
    198a:	cf 93       	push	r28
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
    1990:	2f 97       	sbiw	r28, 0x0f	; 15
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	de bf       	out	0x3e, r29	; 62
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	cd bf       	out	0x3d, r28	; 61
    199c:	8f 87       	std	Y+15, r24	; 0x0f

		MDIO_VoidSetPinValue(DIO_U8_PORTA,DIO_U8_PIN2,DIO_U8_LOW);
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	62 e0       	ldi	r22, 0x02	; 2
    19a2:	40 e0       	ldi	r20, 0x00	; 0
    19a4:	0e 94 78 09 	call	0x12f0	; 0x12f0 <MDIO_VoidSetPinValue>
		MDIO_VoidSetPinValue(DIO_U8_PORTA,DIO_U8_PIN1,DIO_U8_LOW);
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	61 e0       	ldi	r22, 0x01	; 1
    19ac:	40 e0       	ldi	r20, 0x00	; 0
    19ae:	0e 94 78 09 	call	0x12f0	; 0x12f0 <MDIO_VoidSetPinValue>
		MDIO_VoidSetPortValue(LCD_DATA_PORT,copy_u8_command);
    19b2:	82 e0       	ldi	r24, 0x02	; 2
    19b4:	6f 85       	ldd	r22, Y+15	; 0x0f
    19b6:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <MDIO_VoidSetPortValue>
		MDIO_VoidSetPinValue(DIO_U8_PORTA,DIO_U8_PIN0,DIO_U8_HIGH);
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	60 e0       	ldi	r22, 0x00	; 0
    19be:	41 e0       	ldi	r20, 0x01	; 1
    19c0:	0e 94 78 09 	call	0x12f0	; 0x12f0 <MDIO_VoidSetPinValue>
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	a0 e0       	ldi	r26, 0x00	; 0
    19ca:	b0 e4       	ldi	r27, 0x40	; 64
    19cc:	8b 87       	std	Y+11, r24	; 0x0b
    19ce:	9c 87       	std	Y+12, r25	; 0x0c
    19d0:	ad 87       	std	Y+13, r26	; 0x0d
    19d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19da:	9e 85       	ldd	r25, Y+14	; 0x0e
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	4a ef       	ldi	r20, 0xFA	; 250
    19e2:	54 e4       	ldi	r21, 0x44	; 68
    19e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	8f 83       	std	Y+7, r24	; 0x07
    19ee:	98 87       	std	Y+8, r25	; 0x08
    19f0:	a9 87       	std	Y+9, r26	; 0x09
    19f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19f4:	6f 81       	ldd	r22, Y+7	; 0x07
    19f6:	78 85       	ldd	r23, Y+8	; 0x08
    19f8:	89 85       	ldd	r24, Y+9	; 0x09
    19fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	40 e8       	ldi	r20, 0x80	; 128
    1a02:	5f e3       	ldi	r21, 0x3F	; 63
    1a04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a08:	88 23       	and	r24, r24
    1a0a:	2c f4       	brge	.+10     	; 0x1a16 <HLCD_SendCommand+0x8e>
		__ticks = 1;
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	9e 83       	std	Y+6, r25	; 0x06
    1a12:	8d 83       	std	Y+5, r24	; 0x05
    1a14:	3f c0       	rjmp	.+126    	; 0x1a94 <HLCD_SendCommand+0x10c>
	else if (__tmp > 65535)
    1a16:	6f 81       	ldd	r22, Y+7	; 0x07
    1a18:	78 85       	ldd	r23, Y+8	; 0x08
    1a1a:	89 85       	ldd	r24, Y+9	; 0x09
    1a1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	3f ef       	ldi	r19, 0xFF	; 255
    1a22:	4f e7       	ldi	r20, 0x7F	; 127
    1a24:	57 e4       	ldi	r21, 0x47	; 71
    1a26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a2a:	18 16       	cp	r1, r24
    1a2c:	4c f5       	brge	.+82     	; 0x1a80 <HLCD_SendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a30:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	40 e2       	ldi	r20, 0x20	; 32
    1a3c:	51 e4       	ldi	r21, 0x41	; 65
    1a3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	bc 01       	movw	r22, r24
    1a48:	cd 01       	movw	r24, r26
    1a4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	9e 83       	std	Y+6, r25	; 0x06
    1a54:	8d 83       	std	Y+5, r24	; 0x05
    1a56:	0f c0       	rjmp	.+30     	; 0x1a76 <HLCD_SendCommand+0xee>
    1a58:	88 ec       	ldi	r24, 0xC8	; 200
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	9c 83       	std	Y+4, r25	; 0x04
    1a5e:	8b 83       	std	Y+3, r24	; 0x03
    1a60:	8b 81       	ldd	r24, Y+3	; 0x03
    1a62:	9c 81       	ldd	r25, Y+4	; 0x04
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	f1 f7       	brne	.-4      	; 0x1a64 <HLCD_SendCommand+0xdc>
    1a68:	9c 83       	std	Y+4, r25	; 0x04
    1a6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	9e 83       	std	Y+6, r25	; 0x06
    1a74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a76:	8d 81       	ldd	r24, Y+5	; 0x05
    1a78:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	69 f7       	brne	.-38     	; 0x1a58 <HLCD_SendCommand+0xd0>
    1a7e:	14 c0       	rjmp	.+40     	; 0x1aa8 <HLCD_SendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a80:	6f 81       	ldd	r22, Y+7	; 0x07
    1a82:	78 85       	ldd	r23, Y+8	; 0x08
    1a84:	89 85       	ldd	r24, Y+9	; 0x09
    1a86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	9e 83       	std	Y+6, r25	; 0x06
    1a92:	8d 83       	std	Y+5, r24	; 0x05
    1a94:	8d 81       	ldd	r24, Y+5	; 0x05
    1a96:	9e 81       	ldd	r25, Y+6	; 0x06
    1a98:	9a 83       	std	Y+2, r25	; 0x02
    1a9a:	89 83       	std	Y+1, r24	; 0x01
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa0:	01 97       	sbiw	r24, 0x01	; 1
    1aa2:	f1 f7       	brne	.-4      	; 0x1aa0 <HLCD_SendCommand+0x118>
    1aa4:	9a 83       	std	Y+2, r25	; 0x02
    1aa6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		MDIO_VoidSetPinValue(DIO_U8_PORTA,DIO_U8_PIN0,DIO_U8_LOW);
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	60 e0       	ldi	r22, 0x00	; 0
    1aac:	40 e0       	ldi	r20, 0x00	; 0
    1aae:	0e 94 78 09 	call	0x12f0	; 0x12f0 <MDIO_VoidSetPinValue>
}
    1ab2:	2f 96       	adiw	r28, 0x0f	; 15
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	cd bf       	out	0x3d, r28	; 61
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <HLCD_VoidInit>:
void HLCD_VoidInit(void)
{
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	e8 97       	sbiw	r28, 0x38	; 56
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	de bf       	out	0x3e, r29	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	cd bf       	out	0x3d, r28	; 61
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	a0 ef       	ldi	r26, 0xF0	; 240
    1ade:	b1 e4       	ldi	r27, 0x41	; 65
    1ae0:	8d ab       	std	Y+53, r24	; 0x35
    1ae2:	9e ab       	std	Y+54, r25	; 0x36
    1ae4:	af ab       	std	Y+55, r26	; 0x37
    1ae6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae8:	6d a9       	ldd	r22, Y+53	; 0x35
    1aea:	7e a9       	ldd	r23, Y+54	; 0x36
    1aec:	8f a9       	ldd	r24, Y+55	; 0x37
    1aee:	98 ad       	ldd	r25, Y+56	; 0x38
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	4a ef       	ldi	r20, 0xFA	; 250
    1af6:	54 e4       	ldi	r21, 0x44	; 68
    1af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	89 ab       	std	Y+49, r24	; 0x31
    1b02:	9a ab       	std	Y+50, r25	; 0x32
    1b04:	ab ab       	std	Y+51, r26	; 0x33
    1b06:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b08:	69 a9       	ldd	r22, Y+49	; 0x31
    1b0a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b0c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b0e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	40 e8       	ldi	r20, 0x80	; 128
    1b16:	5f e3       	ldi	r21, 0x3F	; 63
    1b18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b1c:	88 23       	and	r24, r24
    1b1e:	2c f4       	brge	.+10     	; 0x1b2a <HLCD_VoidInit+0x66>
		__ticks = 1;
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	98 ab       	std	Y+48, r25	; 0x30
    1b26:	8f a7       	std	Y+47, r24	; 0x2f
    1b28:	3f c0       	rjmp	.+126    	; 0x1ba8 <HLCD_VoidInit+0xe4>
	else if (__tmp > 65535)
    1b2a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b2c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b2e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b30:	9c a9       	ldd	r25, Y+52	; 0x34
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	3f ef       	ldi	r19, 0xFF	; 255
    1b36:	4f e7       	ldi	r20, 0x7F	; 127
    1b38:	57 e4       	ldi	r21, 0x47	; 71
    1b3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b3e:	18 16       	cp	r1, r24
    1b40:	4c f5       	brge	.+82     	; 0x1b94 <HLCD_VoidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b42:	6d a9       	ldd	r22, Y+53	; 0x35
    1b44:	7e a9       	ldd	r23, Y+54	; 0x36
    1b46:	8f a9       	ldd	r24, Y+55	; 0x37
    1b48:	98 ad       	ldd	r25, Y+56	; 0x38
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	40 e2       	ldi	r20, 0x20	; 32
    1b50:	51 e4       	ldi	r21, 0x41	; 65
    1b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	bc 01       	movw	r22, r24
    1b5c:	cd 01       	movw	r24, r26
    1b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	98 ab       	std	Y+48, r25	; 0x30
    1b68:	8f a7       	std	Y+47, r24	; 0x2f
    1b6a:	0f c0       	rjmp	.+30     	; 0x1b8a <HLCD_VoidInit+0xc6>
    1b6c:	88 ec       	ldi	r24, 0xC8	; 200
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	9e a7       	std	Y+46, r25	; 0x2e
    1b72:	8d a7       	std	Y+45, r24	; 0x2d
    1b74:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b76:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	f1 f7       	brne	.-4      	; 0x1b78 <HLCD_VoidInit+0xb4>
    1b7c:	9e a7       	std	Y+46, r25	; 0x2e
    1b7e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b80:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b82:	98 a9       	ldd	r25, Y+48	; 0x30
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	98 ab       	std	Y+48, r25	; 0x30
    1b88:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b8c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b8e:	00 97       	sbiw	r24, 0x00	; 0
    1b90:	69 f7       	brne	.-38     	; 0x1b6c <HLCD_VoidInit+0xa8>
    1b92:	14 c0       	rjmp	.+40     	; 0x1bbc <HLCD_VoidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b94:	69 a9       	ldd	r22, Y+49	; 0x31
    1b96:	7a a9       	ldd	r23, Y+50	; 0x32
    1b98:	8b a9       	ldd	r24, Y+51	; 0x33
    1b9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	98 ab       	std	Y+48, r25	; 0x30
    1ba6:	8f a7       	std	Y+47, r24	; 0x2f
    1ba8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1baa:	98 a9       	ldd	r25, Y+48	; 0x30
    1bac:	9c a7       	std	Y+44, r25	; 0x2c
    1bae:	8b a7       	std	Y+43, r24	; 0x2b
    1bb0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bb2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	f1 f7       	brne	.-4      	; 0x1bb4 <HLCD_VoidInit+0xf0>
    1bb8:	9c a7       	std	Y+44, r25	; 0x2c
    1bba:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(30);
    HLCD_SendCommand(LCD_U8_FUNCTION_SET);
    1bbc:	8c e3       	ldi	r24, 0x3C	; 60
    1bbe:	0e 94 c4 0c 	call	0x1988	; 0x1988 <HLCD_SendCommand>
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	a0 e8       	ldi	r26, 0x80	; 128
    1bc8:	bf e3       	ldi	r27, 0x3F	; 63
    1bca:	8f a3       	std	Y+39, r24	; 0x27
    1bcc:	98 a7       	std	Y+40, r25	; 0x28
    1bce:	a9 a7       	std	Y+41, r26	; 0x29
    1bd0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd2:	6f a1       	ldd	r22, Y+39	; 0x27
    1bd4:	78 a5       	ldd	r23, Y+40	; 0x28
    1bd6:	89 a5       	ldd	r24, Y+41	; 0x29
    1bd8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	4a ef       	ldi	r20, 0xFA	; 250
    1be0:	54 e4       	ldi	r21, 0x44	; 68
    1be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	8b a3       	std	Y+35, r24	; 0x23
    1bec:	9c a3       	std	Y+36, r25	; 0x24
    1bee:	ad a3       	std	Y+37, r26	; 0x25
    1bf0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bf2:	6b a1       	ldd	r22, Y+35	; 0x23
    1bf4:	7c a1       	ldd	r23, Y+36	; 0x24
    1bf6:	8d a1       	ldd	r24, Y+37	; 0x25
    1bf8:	9e a1       	ldd	r25, Y+38	; 0x26
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	40 e8       	ldi	r20, 0x80	; 128
    1c00:	5f e3       	ldi	r21, 0x3F	; 63
    1c02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c06:	88 23       	and	r24, r24
    1c08:	2c f4       	brge	.+10     	; 0x1c14 <HLCD_VoidInit+0x150>
		__ticks = 1;
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	9a a3       	std	Y+34, r25	; 0x22
    1c10:	89 a3       	std	Y+33, r24	; 0x21
    1c12:	3f c0       	rjmp	.+126    	; 0x1c92 <HLCD_VoidInit+0x1ce>
	else if (__tmp > 65535)
    1c14:	6b a1       	ldd	r22, Y+35	; 0x23
    1c16:	7c a1       	ldd	r23, Y+36	; 0x24
    1c18:	8d a1       	ldd	r24, Y+37	; 0x25
    1c1a:	9e a1       	ldd	r25, Y+38	; 0x26
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	3f ef       	ldi	r19, 0xFF	; 255
    1c20:	4f e7       	ldi	r20, 0x7F	; 127
    1c22:	57 e4       	ldi	r21, 0x47	; 71
    1c24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c28:	18 16       	cp	r1, r24
    1c2a:	4c f5       	brge	.+82     	; 0x1c7e <HLCD_VoidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c2c:	6f a1       	ldd	r22, Y+39	; 0x27
    1c2e:	78 a5       	ldd	r23, Y+40	; 0x28
    1c30:	89 a5       	ldd	r24, Y+41	; 0x29
    1c32:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	40 e2       	ldi	r20, 0x20	; 32
    1c3a:	51 e4       	ldi	r21, 0x41	; 65
    1c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	bc 01       	movw	r22, r24
    1c46:	cd 01       	movw	r24, r26
    1c48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	9a a3       	std	Y+34, r25	; 0x22
    1c52:	89 a3       	std	Y+33, r24	; 0x21
    1c54:	0f c0       	rjmp	.+30     	; 0x1c74 <HLCD_VoidInit+0x1b0>
    1c56:	88 ec       	ldi	r24, 0xC8	; 200
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	98 a3       	std	Y+32, r25	; 0x20
    1c5c:	8f 8f       	std	Y+31, r24	; 0x1f
    1c5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c60:	98 a1       	ldd	r25, Y+32	; 0x20
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	f1 f7       	brne	.-4      	; 0x1c62 <HLCD_VoidInit+0x19e>
    1c66:	98 a3       	std	Y+32, r25	; 0x20
    1c68:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c6e:	01 97       	sbiw	r24, 0x01	; 1
    1c70:	9a a3       	std	Y+34, r25	; 0x22
    1c72:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c74:	89 a1       	ldd	r24, Y+33	; 0x21
    1c76:	9a a1       	ldd	r25, Y+34	; 0x22
    1c78:	00 97       	sbiw	r24, 0x00	; 0
    1c7a:	69 f7       	brne	.-38     	; 0x1c56 <HLCD_VoidInit+0x192>
    1c7c:	14 c0       	rjmp	.+40     	; 0x1ca6 <HLCD_VoidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c7e:	6b a1       	ldd	r22, Y+35	; 0x23
    1c80:	7c a1       	ldd	r23, Y+36	; 0x24
    1c82:	8d a1       	ldd	r24, Y+37	; 0x25
    1c84:	9e a1       	ldd	r25, Y+38	; 0x26
    1c86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	9a a3       	std	Y+34, r25	; 0x22
    1c90:	89 a3       	std	Y+33, r24	; 0x21
    1c92:	89 a1       	ldd	r24, Y+33	; 0x21
    1c94:	9a a1       	ldd	r25, Y+34	; 0x22
    1c96:	9e 8f       	std	Y+30, r25	; 0x1e
    1c98:	8d 8f       	std	Y+29, r24	; 0x1d
    1c9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c9c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	f1 f7       	brne	.-4      	; 0x1c9e <HLCD_VoidInit+0x1da>
    1ca2:	9e 8f       	std	Y+30, r25	; 0x1e
    1ca4:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);
    HLCD_SendCommand(LCD_U8_DISPLAY_CONTROL);
    1ca6:	8c e0       	ldi	r24, 0x0C	; 12
    1ca8:	0e 94 c4 0c 	call	0x1988	; 0x1988 <HLCD_SendCommand>
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	a0 e8       	ldi	r26, 0x80	; 128
    1cb2:	bf e3       	ldi	r27, 0x3F	; 63
    1cb4:	89 8f       	std	Y+25, r24	; 0x19
    1cb6:	9a 8f       	std	Y+26, r25	; 0x1a
    1cb8:	ab 8f       	std	Y+27, r26	; 0x1b
    1cba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cbc:	69 8d       	ldd	r22, Y+25	; 0x19
    1cbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	4a ef       	ldi	r20, 0xFA	; 250
    1cca:	54 e4       	ldi	r21, 0x44	; 68
    1ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	8d 8b       	std	Y+21, r24	; 0x15
    1cd6:	9e 8b       	std	Y+22, r25	; 0x16
    1cd8:	af 8b       	std	Y+23, r26	; 0x17
    1cda:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cdc:	6d 89       	ldd	r22, Y+21	; 0x15
    1cde:	7e 89       	ldd	r23, Y+22	; 0x16
    1ce0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ce2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	40 e8       	ldi	r20, 0x80	; 128
    1cea:	5f e3       	ldi	r21, 0x3F	; 63
    1cec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cf0:	88 23       	and	r24, r24
    1cf2:	2c f4       	brge	.+10     	; 0x1cfe <HLCD_VoidInit+0x23a>
		__ticks = 1;
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	9c 8b       	std	Y+20, r25	; 0x14
    1cfa:	8b 8b       	std	Y+19, r24	; 0x13
    1cfc:	3f c0       	rjmp	.+126    	; 0x1d7c <HLCD_VoidInit+0x2b8>
	else if (__tmp > 65535)
    1cfe:	6d 89       	ldd	r22, Y+21	; 0x15
    1d00:	7e 89       	ldd	r23, Y+22	; 0x16
    1d02:	8f 89       	ldd	r24, Y+23	; 0x17
    1d04:	98 8d       	ldd	r25, Y+24	; 0x18
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	3f ef       	ldi	r19, 0xFF	; 255
    1d0a:	4f e7       	ldi	r20, 0x7F	; 127
    1d0c:	57 e4       	ldi	r21, 0x47	; 71
    1d0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d12:	18 16       	cp	r1, r24
    1d14:	4c f5       	brge	.+82     	; 0x1d68 <HLCD_VoidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d16:	69 8d       	ldd	r22, Y+25	; 0x19
    1d18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 e2       	ldi	r20, 0x20	; 32
    1d24:	51 e4       	ldi	r21, 0x41	; 65
    1d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	bc 01       	movw	r22, r24
    1d30:	cd 01       	movw	r24, r26
    1d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	9c 8b       	std	Y+20, r25	; 0x14
    1d3c:	8b 8b       	std	Y+19, r24	; 0x13
    1d3e:	0f c0       	rjmp	.+30     	; 0x1d5e <HLCD_VoidInit+0x29a>
    1d40:	88 ec       	ldi	r24, 0xC8	; 200
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	9a 8b       	std	Y+18, r25	; 0x12
    1d46:	89 8b       	std	Y+17, r24	; 0x11
    1d48:	89 89       	ldd	r24, Y+17	; 0x11
    1d4a:	9a 89       	ldd	r25, Y+18	; 0x12
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	f1 f7       	brne	.-4      	; 0x1d4c <HLCD_VoidInit+0x288>
    1d50:	9a 8b       	std	Y+18, r25	; 0x12
    1d52:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d54:	8b 89       	ldd	r24, Y+19	; 0x13
    1d56:	9c 89       	ldd	r25, Y+20	; 0x14
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	9c 8b       	std	Y+20, r25	; 0x14
    1d5c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d60:	9c 89       	ldd	r25, Y+20	; 0x14
    1d62:	00 97       	sbiw	r24, 0x00	; 0
    1d64:	69 f7       	brne	.-38     	; 0x1d40 <HLCD_VoidInit+0x27c>
    1d66:	14 c0       	rjmp	.+40     	; 0x1d90 <HLCD_VoidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d68:	6d 89       	ldd	r22, Y+21	; 0x15
    1d6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	9c 8b       	std	Y+20, r25	; 0x14
    1d7a:	8b 8b       	std	Y+19, r24	; 0x13
    1d7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d80:	98 8b       	std	Y+16, r25	; 0x10
    1d82:	8f 87       	std	Y+15, r24	; 0x0f
    1d84:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d86:	98 89       	ldd	r25, Y+16	; 0x10
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	f1 f7       	brne	.-4      	; 0x1d88 <HLCD_VoidInit+0x2c4>
    1d8c:	98 8b       	std	Y+16, r25	; 0x10
    1d8e:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    HLCD_SendCommand(LCD_U8_CLEAR_DISPLAY);
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	0e 94 c4 0c 	call	0x1988	; 0x1988 <HLCD_SendCommand>
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	a0 e0       	ldi	r26, 0x00	; 0
    1d9c:	b0 e4       	ldi	r27, 0x40	; 64
    1d9e:	8b 87       	std	Y+11, r24	; 0x0b
    1da0:	9c 87       	std	Y+12, r25	; 0x0c
    1da2:	ad 87       	std	Y+13, r26	; 0x0d
    1da4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1da8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1daa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	4a ef       	ldi	r20, 0xFA	; 250
    1db4:	54 e4       	ldi	r21, 0x44	; 68
    1db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	8f 83       	std	Y+7, r24	; 0x07
    1dc0:	98 87       	std	Y+8, r25	; 0x08
    1dc2:	a9 87       	std	Y+9, r26	; 0x09
    1dc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc8:	78 85       	ldd	r23, Y+8	; 0x08
    1dca:	89 85       	ldd	r24, Y+9	; 0x09
    1dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	40 e8       	ldi	r20, 0x80	; 128
    1dd4:	5f e3       	ldi	r21, 0x3F	; 63
    1dd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dda:	88 23       	and	r24, r24
    1ddc:	2c f4       	brge	.+10     	; 0x1de8 <HLCD_VoidInit+0x324>
		__ticks = 1;
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	9e 83       	std	Y+6, r25	; 0x06
    1de4:	8d 83       	std	Y+5, r24	; 0x05
    1de6:	3f c0       	rjmp	.+126    	; 0x1e66 <HLCD_VoidInit+0x3a2>
	else if (__tmp > 65535)
    1de8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dea:	78 85       	ldd	r23, Y+8	; 0x08
    1dec:	89 85       	ldd	r24, Y+9	; 0x09
    1dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	3f ef       	ldi	r19, 0xFF	; 255
    1df4:	4f e7       	ldi	r20, 0x7F	; 127
    1df6:	57 e4       	ldi	r21, 0x47	; 71
    1df8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dfc:	18 16       	cp	r1, r24
    1dfe:	4c f5       	brge	.+82     	; 0x1e52 <HLCD_VoidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	40 e2       	ldi	r20, 0x20	; 32
    1e0e:	51 e4       	ldi	r21, 0x41	; 65
    1e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	bc 01       	movw	r22, r24
    1e1a:	cd 01       	movw	r24, r26
    1e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	9e 83       	std	Y+6, r25	; 0x06
    1e26:	8d 83       	std	Y+5, r24	; 0x05
    1e28:	0f c0       	rjmp	.+30     	; 0x1e48 <HLCD_VoidInit+0x384>
    1e2a:	88 ec       	ldi	r24, 0xC8	; 200
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	9c 83       	std	Y+4, r25	; 0x04
    1e30:	8b 83       	std	Y+3, r24	; 0x03
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	9c 81       	ldd	r25, Y+4	; 0x04
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	f1 f7       	brne	.-4      	; 0x1e36 <HLCD_VoidInit+0x372>
    1e3a:	9c 83       	std	Y+4, r25	; 0x04
    1e3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e40:	9e 81       	ldd	r25, Y+6	; 0x06
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	9e 83       	std	Y+6, r25	; 0x06
    1e46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e48:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4c:	00 97       	sbiw	r24, 0x00	; 0
    1e4e:	69 f7       	brne	.-38     	; 0x1e2a <HLCD_VoidInit+0x366>
    1e50:	14 c0       	rjmp	.+40     	; 0x1e7a <HLCD_VoidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e52:	6f 81       	ldd	r22, Y+7	; 0x07
    1e54:	78 85       	ldd	r23, Y+8	; 0x08
    1e56:	89 85       	ldd	r24, Y+9	; 0x09
    1e58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	9e 83       	std	Y+6, r25	; 0x06
    1e64:	8d 83       	std	Y+5, r24	; 0x05
    1e66:	8d 81       	ldd	r24, Y+5	; 0x05
    1e68:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6a:	9a 83       	std	Y+2, r25	; 0x02
    1e6c:	89 83       	std	Y+1, r24	; 0x01
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	9a 81       	ldd	r25, Y+2	; 0x02
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	f1 f7       	brne	.-4      	; 0x1e72 <HLCD_VoidInit+0x3ae>
    1e76:	9a 83       	std	Y+2, r25	; 0x02
    1e78:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    HLCD_SendCommand(LCD_U8_ENTRY_SET);
    1e7a:	86 e0       	ldi	r24, 0x06	; 6
    1e7c:	0e 94 c4 0c 	call	0x1988	; 0x1988 <HLCD_SendCommand>

}
    1e80:	e8 96       	adiw	r28, 0x38	; 56
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	f8 94       	cli
    1e86:	de bf       	out	0x3e, r29	; 62
    1e88:	0f be       	out	0x3f, r0	; 63
    1e8a:	cd bf       	out	0x3d, r28	; 61
    1e8c:	cf 91       	pop	r28
    1e8e:	df 91       	pop	r29
    1e90:	08 95       	ret

00001e92 <HLCD_VoidSendData>:

void HLCD_VoidSendData(u8 copy_8uChar)
{
    1e92:	df 93       	push	r29
    1e94:	cf 93       	push	r28
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
    1e9a:	2f 97       	sbiw	r28, 0x0f	; 15
    1e9c:	0f b6       	in	r0, 0x3f	; 63
    1e9e:	f8 94       	cli
    1ea0:	de bf       	out	0x3e, r29	; 62
    1ea2:	0f be       	out	0x3f, r0	; 63
    1ea4:	cd bf       	out	0x3d, r28	; 61
    1ea6:	8f 87       	std	Y+15, r24	; 0x0f
	        //rs=1
			MDIO_VoidSetPinValue(DIO_U8_PORTA,DIO_U8_PIN2,DIO_U8_HIGH);
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	62 e0       	ldi	r22, 0x02	; 2
    1eac:	41 e0       	ldi	r20, 0x01	; 1
    1eae:	0e 94 78 09 	call	0x12f0	; 0x12f0 <MDIO_VoidSetPinValue>
			//rw=0
			MDIO_VoidSetPinValue(DIO_U8_PORTA,DIO_U8_PIN1,DIO_U8_LOW);
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	61 e0       	ldi	r22, 0x01	; 1
    1eb6:	40 e0       	ldi	r20, 0x00	; 0
    1eb8:	0e 94 78 09 	call	0x12f0	; 0x12f0 <MDIO_VoidSetPinValue>

			MDIO_VoidSetPortValue(LCD_DATA_PORT,copy_8uChar);
    1ebc:	82 e0       	ldi	r24, 0x02	; 2
    1ebe:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ec0:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <MDIO_VoidSetPortValue>
			//1 enable
			MDIO_VoidSetPinValue(DIO_U8_PORTA,DIO_U8_PIN0,DIO_U8_HIGH);
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	60 e0       	ldi	r22, 0x00	; 0
    1ec8:	41 e0       	ldi	r20, 0x01	; 1
    1eca:	0e 94 78 09 	call	0x12f0	; 0x12f0 <MDIO_VoidSetPinValue>
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	a0 e4       	ldi	r26, 0x40	; 64
    1ed4:	b0 e4       	ldi	r27, 0x40	; 64
    1ed6:	8b 87       	std	Y+11, r24	; 0x0b
    1ed8:	9c 87       	std	Y+12, r25	; 0x0c
    1eda:	ad 87       	std	Y+13, r26	; 0x0d
    1edc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ede:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ee4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	4a ef       	ldi	r20, 0xFA	; 250
    1eec:	54 e4       	ldi	r21, 0x44	; 68
    1eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	8f 83       	std	Y+7, r24	; 0x07
    1ef8:	98 87       	std	Y+8, r25	; 0x08
    1efa:	a9 87       	std	Y+9, r26	; 0x09
    1efc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1efe:	6f 81       	ldd	r22, Y+7	; 0x07
    1f00:	78 85       	ldd	r23, Y+8	; 0x08
    1f02:	89 85       	ldd	r24, Y+9	; 0x09
    1f04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	40 e8       	ldi	r20, 0x80	; 128
    1f0c:	5f e3       	ldi	r21, 0x3F	; 63
    1f0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f12:	88 23       	and	r24, r24
    1f14:	2c f4       	brge	.+10     	; 0x1f20 <HLCD_VoidSendData+0x8e>
		__ticks = 1;
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	9e 83       	std	Y+6, r25	; 0x06
    1f1c:	8d 83       	std	Y+5, r24	; 0x05
    1f1e:	3f c0       	rjmp	.+126    	; 0x1f9e <HLCD_VoidSendData+0x10c>
	else if (__tmp > 65535)
    1f20:	6f 81       	ldd	r22, Y+7	; 0x07
    1f22:	78 85       	ldd	r23, Y+8	; 0x08
    1f24:	89 85       	ldd	r24, Y+9	; 0x09
    1f26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	3f ef       	ldi	r19, 0xFF	; 255
    1f2c:	4f e7       	ldi	r20, 0x7F	; 127
    1f2e:	57 e4       	ldi	r21, 0x47	; 71
    1f30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f34:	18 16       	cp	r1, r24
    1f36:	4c f5       	brge	.+82     	; 0x1f8a <HLCD_VoidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	40 e2       	ldi	r20, 0x20	; 32
    1f46:	51 e4       	ldi	r21, 0x41	; 65
    1f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	bc 01       	movw	r22, r24
    1f52:	cd 01       	movw	r24, r26
    1f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	9e 83       	std	Y+6, r25	; 0x06
    1f5e:	8d 83       	std	Y+5, r24	; 0x05
    1f60:	0f c0       	rjmp	.+30     	; 0x1f80 <HLCD_VoidSendData+0xee>
    1f62:	88 ec       	ldi	r24, 0xC8	; 200
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	9c 83       	std	Y+4, r25	; 0x04
    1f68:	8b 83       	std	Y+3, r24	; 0x03
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	f1 f7       	brne	.-4      	; 0x1f6e <HLCD_VoidSendData+0xdc>
    1f72:	9c 83       	std	Y+4, r25	; 0x04
    1f74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f76:	8d 81       	ldd	r24, Y+5	; 0x05
    1f78:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	9e 83       	std	Y+6, r25	; 0x06
    1f7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f80:	8d 81       	ldd	r24, Y+5	; 0x05
    1f82:	9e 81       	ldd	r25, Y+6	; 0x06
    1f84:	00 97       	sbiw	r24, 0x00	; 0
    1f86:	69 f7       	brne	.-38     	; 0x1f62 <HLCD_VoidSendData+0xd0>
    1f88:	14 c0       	rjmp	.+40     	; 0x1fb2 <HLCD_VoidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f8c:	78 85       	ldd	r23, Y+8	; 0x08
    1f8e:	89 85       	ldd	r24, Y+9	; 0x09
    1f90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	9e 83       	std	Y+6, r25	; 0x06
    1f9c:	8d 83       	std	Y+5, r24	; 0x05
    1f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa2:	9a 83       	std	Y+2, r25	; 0x02
    1fa4:	89 83       	std	Y+1, r24	; 0x01
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1faa:	01 97       	sbiw	r24, 0x01	; 1
    1fac:	f1 f7       	brne	.-4      	; 0x1faa <HLCD_VoidSendData+0x118>
    1fae:	9a 83       	std	Y+2, r25	; 0x02
    1fb0:	89 83       	std	Y+1, r24	; 0x01
			//delay
			_delay_ms(3);
			MDIO_VoidSetPinValue(DIO_U8_PORTA,DIO_U8_PIN0,DIO_U8_LOW);
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	60 e0       	ldi	r22, 0x00	; 0
    1fb6:	40 e0       	ldi	r20, 0x00	; 0
    1fb8:	0e 94 78 09 	call	0x12f0	; 0x12f0 <MDIO_VoidSetPinValue>
}
    1fbc:	2f 96       	adiw	r28, 0x0f	; 15
    1fbe:	0f b6       	in	r0, 0x3f	; 63
    1fc0:	f8 94       	cli
    1fc2:	de bf       	out	0x3e, r29	; 62
    1fc4:	0f be       	out	0x3f, r0	; 63
    1fc6:	cd bf       	out	0x3d, r28	; 61
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	08 95       	ret

00001fce <HLCD_VoidSendString>:
void HLCD_VoidSendString(u8 *copy_P8uString)
{
    1fce:	df 93       	push	r29
    1fd0:	cf 93       	push	r28
    1fd2:	00 d0       	rcall	.+0      	; 0x1fd4 <HLCD_VoidSendString+0x6>
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	9a 83       	std	Y+2, r25	; 0x02
    1fda:	89 83       	std	Y+1, r24	; 0x01
    1fdc:	0b c0       	rjmp	.+22     	; 0x1ff4 <HLCD_VoidSendString+0x26>
	while(*copy_P8uString>0)
	{
		HLCD_VoidSendData(*copy_P8uString++);
    1fde:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe0:	fa 81       	ldd	r31, Y+2	; 0x02
    1fe2:	20 81       	ld	r18, Z
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe8:	01 96       	adiw	r24, 0x01	; 1
    1fea:	9a 83       	std	Y+2, r25	; 0x02
    1fec:	89 83       	std	Y+1, r24	; 0x01
    1fee:	82 2f       	mov	r24, r18
    1ff0:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <HLCD_VoidSendData>
			_delay_ms(3);
			MDIO_VoidSetPinValue(DIO_U8_PORTA,DIO_U8_PIN0,DIO_U8_LOW);
}
void HLCD_VoidSendString(u8 *copy_P8uString)
{
	while(*copy_P8uString>0)
    1ff4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff8:	80 81       	ld	r24, Z
    1ffa:	88 23       	and	r24, r24
    1ffc:	81 f7       	brne	.-32     	; 0x1fde <HLCD_VoidSendString+0x10>
	{
		HLCD_VoidSendData(*copy_P8uString++);
	}
}
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	cf 91       	pop	r28
    2004:	df 91       	pop	r29
    2006:	08 95       	ret

00002008 <HLCD_VoidClearDisplay>:

void HLCD_VoidClearDisplay(void)
{
    2008:	df 93       	push	r29
    200a:	cf 93       	push	r28
    200c:	cd b7       	in	r28, 0x3d	; 61
    200e:	de b7       	in	r29, 0x3e	; 62
    2010:	2e 97       	sbiw	r28, 0x0e	; 14
    2012:	0f b6       	in	r0, 0x3f	; 63
    2014:	f8 94       	cli
    2016:	de bf       	out	0x3e, r29	; 62
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	cd bf       	out	0x3d, r28	; 61
	HLCD_SendCommand(0x01);
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	0e 94 c4 0c 	call	0x1988	; 0x1988 <HLCD_SendCommand>
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	a0 e0       	ldi	r26, 0x00	; 0
    2028:	b0 e4       	ldi	r27, 0x40	; 64
    202a:	8b 87       	std	Y+11, r24	; 0x0b
    202c:	9c 87       	std	Y+12, r25	; 0x0c
    202e:	ad 87       	std	Y+13, r26	; 0x0d
    2030:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2032:	6b 85       	ldd	r22, Y+11	; 0x0b
    2034:	7c 85       	ldd	r23, Y+12	; 0x0c
    2036:	8d 85       	ldd	r24, Y+13	; 0x0d
    2038:	9e 85       	ldd	r25, Y+14	; 0x0e
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	4a ef       	ldi	r20, 0xFA	; 250
    2040:	54 e4       	ldi	r21, 0x44	; 68
    2042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	8f 83       	std	Y+7, r24	; 0x07
    204c:	98 87       	std	Y+8, r25	; 0x08
    204e:	a9 87       	std	Y+9, r26	; 0x09
    2050:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2052:	6f 81       	ldd	r22, Y+7	; 0x07
    2054:	78 85       	ldd	r23, Y+8	; 0x08
    2056:	89 85       	ldd	r24, Y+9	; 0x09
    2058:	9a 85       	ldd	r25, Y+10	; 0x0a
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	40 e8       	ldi	r20, 0x80	; 128
    2060:	5f e3       	ldi	r21, 0x3F	; 63
    2062:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2066:	88 23       	and	r24, r24
    2068:	2c f4       	brge	.+10     	; 0x2074 <HLCD_VoidClearDisplay+0x6c>
		__ticks = 1;
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	9e 83       	std	Y+6, r25	; 0x06
    2070:	8d 83       	std	Y+5, r24	; 0x05
    2072:	3f c0       	rjmp	.+126    	; 0x20f2 <HLCD_VoidClearDisplay+0xea>
	else if (__tmp > 65535)
    2074:	6f 81       	ldd	r22, Y+7	; 0x07
    2076:	78 85       	ldd	r23, Y+8	; 0x08
    2078:	89 85       	ldd	r24, Y+9	; 0x09
    207a:	9a 85       	ldd	r25, Y+10	; 0x0a
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	3f ef       	ldi	r19, 0xFF	; 255
    2080:	4f e7       	ldi	r20, 0x7F	; 127
    2082:	57 e4       	ldi	r21, 0x47	; 71
    2084:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2088:	18 16       	cp	r1, r24
    208a:	4c f5       	brge	.+82     	; 0x20de <HLCD_VoidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208c:	6b 85       	ldd	r22, Y+11	; 0x0b
    208e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2090:	8d 85       	ldd	r24, Y+13	; 0x0d
    2092:	9e 85       	ldd	r25, Y+14	; 0x0e
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	40 e2       	ldi	r20, 0x20	; 32
    209a:	51 e4       	ldi	r21, 0x41	; 65
    209c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	bc 01       	movw	r22, r24
    20a6:	cd 01       	movw	r24, r26
    20a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	9e 83       	std	Y+6, r25	; 0x06
    20b2:	8d 83       	std	Y+5, r24	; 0x05
    20b4:	0f c0       	rjmp	.+30     	; 0x20d4 <HLCD_VoidClearDisplay+0xcc>
    20b6:	88 ec       	ldi	r24, 0xC8	; 200
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	9c 83       	std	Y+4, r25	; 0x04
    20bc:	8b 83       	std	Y+3, r24	; 0x03
    20be:	8b 81       	ldd	r24, Y+3	; 0x03
    20c0:	9c 81       	ldd	r25, Y+4	; 0x04
    20c2:	01 97       	sbiw	r24, 0x01	; 1
    20c4:	f1 f7       	brne	.-4      	; 0x20c2 <HLCD_VoidClearDisplay+0xba>
    20c6:	9c 83       	std	Y+4, r25	; 0x04
    20c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ca:	8d 81       	ldd	r24, Y+5	; 0x05
    20cc:	9e 81       	ldd	r25, Y+6	; 0x06
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	9e 83       	std	Y+6, r25	; 0x06
    20d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d4:	8d 81       	ldd	r24, Y+5	; 0x05
    20d6:	9e 81       	ldd	r25, Y+6	; 0x06
    20d8:	00 97       	sbiw	r24, 0x00	; 0
    20da:	69 f7       	brne	.-38     	; 0x20b6 <HLCD_VoidClearDisplay+0xae>
    20dc:	14 c0       	rjmp	.+40     	; 0x2106 <HLCD_VoidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20de:	6f 81       	ldd	r22, Y+7	; 0x07
    20e0:	78 85       	ldd	r23, Y+8	; 0x08
    20e2:	89 85       	ldd	r24, Y+9	; 0x09
    20e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	9e 83       	std	Y+6, r25	; 0x06
    20f0:	8d 83       	std	Y+5, r24	; 0x05
    20f2:	8d 81       	ldd	r24, Y+5	; 0x05
    20f4:	9e 81       	ldd	r25, Y+6	; 0x06
    20f6:	9a 83       	std	Y+2, r25	; 0x02
    20f8:	89 83       	std	Y+1, r24	; 0x01
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	9a 81       	ldd	r25, Y+2	; 0x02
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	f1 f7       	brne	.-4      	; 0x20fe <HLCD_VoidClearDisplay+0xf6>
    2102:	9a 83       	std	Y+2, r25	; 0x02
    2104:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2106:	2e 96       	adiw	r28, 0x0e	; 14
    2108:	0f b6       	in	r0, 0x3f	; 63
    210a:	f8 94       	cli
    210c:	de bf       	out	0x3e, r29	; 62
    210e:	0f be       	out	0x3f, r0	; 63
    2110:	cd bf       	out	0x3d, r28	; 61
    2112:	cf 91       	pop	r28
    2114:	df 91       	pop	r29
    2116:	08 95       	ret

00002118 <HLCD_VoidDisplayNumber>:

void HLCD_VoidDisplayNumber(s32 copy_u32Number)
{
    2118:	df 93       	push	r29
    211a:	cf 93       	push	r28
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
    2120:	62 97       	sbiw	r28, 0x12	; 18
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	f8 94       	cli
    2126:	de bf       	out	0x3e, r29	; 62
    2128:	0f be       	out	0x3f, r0	; 63
    212a:	cd bf       	out	0x3d, r28	; 61
    212c:	6f 87       	std	Y+15, r22	; 0x0f
    212e:	78 8b       	std	Y+16, r23	; 0x10
    2130:	89 8b       	std	Y+17, r24	; 0x11
    2132:	9a 8b       	std	Y+18, r25	; 0x12
	u8 U8data,count=0;
    2134:	1d 86       	std	Y+13, r1	; 0x0d
	u32 U32data=0,reverse_n=0,remainder_n;
    2136:	19 86       	std	Y+9, r1	; 0x09
    2138:	1a 86       	std	Y+10, r1	; 0x0a
    213a:	1b 86       	std	Y+11, r1	; 0x0b
    213c:	1c 86       	std	Y+12, r1	; 0x0c
    213e:	1d 82       	std	Y+5, r1	; 0x05
    2140:	1e 82       	std	Y+6, r1	; 0x06
    2142:	1f 82       	std	Y+7, r1	; 0x07
    2144:	18 86       	std	Y+8, r1	; 0x08
	    	if (copy_u32Number == 0)
    2146:	8f 85       	ldd	r24, Y+15	; 0x0f
    2148:	98 89       	ldd	r25, Y+16	; 0x10
    214a:	a9 89       	ldd	r26, Y+17	; 0x11
    214c:	ba 89       	ldd	r27, Y+18	; 0x12
    214e:	00 97       	sbiw	r24, 0x00	; 0
    2150:	a1 05       	cpc	r26, r1
    2152:	b1 05       	cpc	r27, r1
    2154:	19 f4       	brne	.+6      	; 0x215c <HLCD_VoidDisplayNumber+0x44>
	    	{
	    		HLCD_VoidSendData('0');
    2156:	80 e3       	ldi	r24, 0x30	; 48
    2158:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <HLCD_VoidSendData>
	    	}
	    	if (copy_u32Number < 0)
    215c:	8f 85       	ldd	r24, Y+15	; 0x0f
    215e:	98 89       	ldd	r25, Y+16	; 0x10
    2160:	a9 89       	ldd	r26, Y+17	; 0x11
    2162:	ba 89       	ldd	r27, Y+18	; 0x12
    2164:	bb 23       	and	r27, r27
    2166:	94 f4       	brge	.+36     	; 0x218c <HLCD_VoidDisplayNumber+0x74>
	    	{
	    		HLCD_VoidSendData('-');
    2168:	8d e2       	ldi	r24, 0x2D	; 45
    216a:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <HLCD_VoidSendData>
	    		copy_u32Number *= -1;
    216e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2170:	98 89       	ldd	r25, Y+16	; 0x10
    2172:	a9 89       	ldd	r26, Y+17	; 0x11
    2174:	ba 89       	ldd	r27, Y+18	; 0x12
    2176:	b0 95       	com	r27
    2178:	a0 95       	com	r26
    217a:	90 95       	com	r25
    217c:	81 95       	neg	r24
    217e:	9f 4f       	sbci	r25, 0xFF	; 255
    2180:	af 4f       	sbci	r26, 0xFF	; 255
    2182:	bf 4f       	sbci	r27, 0xFF	; 255
    2184:	8f 87       	std	Y+15, r24	; 0x0f
    2186:	98 8b       	std	Y+16, r25	; 0x10
    2188:	a9 8b       	std	Y+17, r26	; 0x11
    218a:	ba 8b       	std	Y+18, r27	; 0x12
	    	}
	    	U32data = copy_u32Number;
    218c:	8f 85       	ldd	r24, Y+15	; 0x0f
    218e:	98 89       	ldd	r25, Y+16	; 0x10
    2190:	a9 89       	ldd	r26, Y+17	; 0x11
    2192:	ba 89       	ldd	r27, Y+18	; 0x12
    2194:	89 87       	std	Y+9, r24	; 0x09
    2196:	9a 87       	std	Y+10, r25	; 0x0a
    2198:	ab 87       	std	Y+11, r26	; 0x0b
    219a:	bc 87       	std	Y+12, r27	; 0x0c
    219c:	41 c0       	rjmp	.+130    	; 0x2220 <HLCD_VoidDisplayNumber+0x108>
			while(U32data!=0)
			{
				    remainder_n=(U32data % 10);
    219e:	89 85       	ldd	r24, Y+9	; 0x09
    21a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a2:	ab 85       	ldd	r26, Y+11	; 0x0b
    21a4:	bc 85       	ldd	r27, Y+12	; 0x0c
    21a6:	2a e0       	ldi	r18, 0x0A	; 10
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	40 e0       	ldi	r20, 0x00	; 0
    21ac:	50 e0       	ldi	r21, 0x00	; 0
    21ae:	bc 01       	movw	r22, r24
    21b0:	cd 01       	movw	r24, r26
    21b2:	0e 94 3f 13 	call	0x267e	; 0x267e <__udivmodsi4>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	89 83       	std	Y+1, r24	; 0x01
    21bc:	9a 83       	std	Y+2, r25	; 0x02
    21be:	ab 83       	std	Y+3, r26	; 0x03
    21c0:	bc 83       	std	Y+4, r27	; 0x04
					reverse_n = remainder_n + reverse_n * 10;
    21c2:	8d 81       	ldd	r24, Y+5	; 0x05
    21c4:	9e 81       	ldd	r25, Y+6	; 0x06
    21c6:	af 81       	ldd	r26, Y+7	; 0x07
    21c8:	b8 85       	ldd	r27, Y+8	; 0x08
    21ca:	2a e0       	ldi	r18, 0x0A	; 10
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	40 e0       	ldi	r20, 0x00	; 0
    21d0:	50 e0       	ldi	r21, 0x00	; 0
    21d2:	bc 01       	movw	r22, r24
    21d4:	cd 01       	movw	r24, r26
    21d6:	0e 94 20 13 	call	0x2640	; 0x2640 <__mulsi3>
    21da:	9b 01       	movw	r18, r22
    21dc:	ac 01       	movw	r20, r24
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	9a 81       	ldd	r25, Y+2	; 0x02
    21e2:	ab 81       	ldd	r26, Y+3	; 0x03
    21e4:	bc 81       	ldd	r27, Y+4	; 0x04
    21e6:	82 0f       	add	r24, r18
    21e8:	93 1f       	adc	r25, r19
    21ea:	a4 1f       	adc	r26, r20
    21ec:	b5 1f       	adc	r27, r21
    21ee:	8d 83       	std	Y+5, r24	; 0x05
    21f0:	9e 83       	std	Y+6, r25	; 0x06
    21f2:	af 83       	std	Y+7, r26	; 0x07
    21f4:	b8 87       	std	Y+8, r27	; 0x08
					U32data = U32data/10;
    21f6:	89 85       	ldd	r24, Y+9	; 0x09
    21f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fa:	ab 85       	ldd	r26, Y+11	; 0x0b
    21fc:	bc 85       	ldd	r27, Y+12	; 0x0c
    21fe:	2a e0       	ldi	r18, 0x0A	; 10
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e0       	ldi	r20, 0x00	; 0
    2204:	50 e0       	ldi	r21, 0x00	; 0
    2206:	bc 01       	movw	r22, r24
    2208:	cd 01       	movw	r24, r26
    220a:	0e 94 3f 13 	call	0x267e	; 0x267e <__udivmodsi4>
    220e:	da 01       	movw	r26, r20
    2210:	c9 01       	movw	r24, r18
    2212:	89 87       	std	Y+9, r24	; 0x09
    2214:	9a 87       	std	Y+10, r25	; 0x0a
    2216:	ab 87       	std	Y+11, r26	; 0x0b
    2218:	bc 87       	std	Y+12, r27	; 0x0c
                    count++;
    221a:	8d 85       	ldd	r24, Y+13	; 0x0d
    221c:	8f 5f       	subi	r24, 0xFF	; 255
    221e:	8d 87       	std	Y+13, r24	; 0x0d
	    	{
	    		HLCD_VoidSendData('-');
	    		copy_u32Number *= -1;
	    	}
	    	U32data = copy_u32Number;
			while(U32data!=0)
    2220:	89 85       	ldd	r24, Y+9	; 0x09
    2222:	9a 85       	ldd	r25, Y+10	; 0x0a
    2224:	ab 85       	ldd	r26, Y+11	; 0x0b
    2226:	bc 85       	ldd	r27, Y+12	; 0x0c
    2228:	00 97       	sbiw	r24, 0x00	; 0
    222a:	a1 05       	cpc	r26, r1
    222c:	b1 05       	cpc	r27, r1
    222e:	09 f0       	breq	.+2      	; 0x2232 <HLCD_VoidDisplayNumber+0x11a>
    2230:	b6 cf       	rjmp	.-148    	; 0x219e <HLCD_VoidDisplayNumber+0x86>
    2232:	2d c0       	rjmp	.+90     	; 0x228e <HLCD_VoidDisplayNumber+0x176>
					U32data = U32data/10;
                    count++;
			}
			while(count!=0)
			{
				remainder_n=(reverse_n % 10);
    2234:	8d 81       	ldd	r24, Y+5	; 0x05
    2236:	9e 81       	ldd	r25, Y+6	; 0x06
    2238:	af 81       	ldd	r26, Y+7	; 0x07
    223a:	b8 85       	ldd	r27, Y+8	; 0x08
    223c:	2a e0       	ldi	r18, 0x0A	; 10
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	40 e0       	ldi	r20, 0x00	; 0
    2242:	50 e0       	ldi	r21, 0x00	; 0
    2244:	bc 01       	movw	r22, r24
    2246:	cd 01       	movw	r24, r26
    2248:	0e 94 3f 13 	call	0x267e	; 0x267e <__udivmodsi4>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	89 83       	std	Y+1, r24	; 0x01
    2252:	9a 83       	std	Y+2, r25	; 0x02
    2254:	ab 83       	std	Y+3, r26	; 0x03
    2256:	bc 83       	std	Y+4, r27	; 0x04
				reverse_n = reverse_n/10;
    2258:	8d 81       	ldd	r24, Y+5	; 0x05
    225a:	9e 81       	ldd	r25, Y+6	; 0x06
    225c:	af 81       	ldd	r26, Y+7	; 0x07
    225e:	b8 85       	ldd	r27, Y+8	; 0x08
    2260:	2a e0       	ldi	r18, 0x0A	; 10
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	40 e0       	ldi	r20, 0x00	; 0
    2266:	50 e0       	ldi	r21, 0x00	; 0
    2268:	bc 01       	movw	r22, r24
    226a:	cd 01       	movw	r24, r26
    226c:	0e 94 3f 13 	call	0x267e	; 0x267e <__udivmodsi4>
    2270:	da 01       	movw	r26, r20
    2272:	c9 01       	movw	r24, r18
    2274:	8d 83       	std	Y+5, r24	; 0x05
    2276:	9e 83       	std	Y+6, r25	; 0x06
    2278:	af 83       	std	Y+7, r26	; 0x07
    227a:	b8 87       	std	Y+8, r27	; 0x08
		     	U8data = (u8)(remainder_n+48);
    227c:	89 81       	ldd	r24, Y+1	; 0x01
    227e:	80 5d       	subi	r24, 0xD0	; 208
    2280:	8e 87       	std	Y+14, r24	; 0x0e
			    HLCD_VoidSendData(U8data);
    2282:	8e 85       	ldd	r24, Y+14	; 0x0e
    2284:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <HLCD_VoidSendData>
			    count--;
    2288:	8d 85       	ldd	r24, Y+13	; 0x0d
    228a:	81 50       	subi	r24, 0x01	; 1
    228c:	8d 87       	std	Y+13, r24	; 0x0d
				    remainder_n=(U32data % 10);
					reverse_n = remainder_n + reverse_n * 10;
					U32data = U32data/10;
                    count++;
			}
			while(count!=0)
    228e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2290:	88 23       	and	r24, r24
    2292:	81 f6       	brne	.-96     	; 0x2234 <HLCD_VoidDisplayNumber+0x11c>
				reverse_n = reverse_n/10;
		     	U8data = (u8)(remainder_n+48);
			    HLCD_VoidSendData(U8data);
			    count--;
			}
}
    2294:	62 96       	adiw	r28, 0x12	; 18
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	de bf       	out	0x3e, r29	; 62
    229c:	0f be       	out	0x3f, r0	; 63
    229e:	cd bf       	out	0x3d, r28	; 61
    22a0:	cf 91       	pop	r28
    22a2:	df 91       	pop	r29
    22a4:	08 95       	ret

000022a6 <HLCD_VoidGoToPos>:


void HLCD_VoidGoToPos(u8 copy_u8RowNum,u8 copy_u8ColumnNo)
{
    22a6:	df 93       	push	r29
    22a8:	cf 93       	push	r28
    22aa:	cd b7       	in	r28, 0x3d	; 61
    22ac:	de b7       	in	r29, 0x3e	; 62
    22ae:	62 97       	sbiw	r28, 0x12	; 18
    22b0:	0f b6       	in	r0, 0x3f	; 63
    22b2:	f8 94       	cli
    22b4:	de bf       	out	0x3e, r29	; 62
    22b6:	0f be       	out	0x3f, r0	; 63
    22b8:	cd bf       	out	0x3d, r28	; 61
    22ba:	8f 87       	std	Y+15, r24	; 0x0f
    22bc:	68 8b       	std	Y+16, r22	; 0x10
   if( (copy_u8RowNum <= LCD_U8_ROW1) && (copy_u8ColumnNo <= LCD_U8_COL15) )
    22be:	8f 85       	ldd	r24, Y+15	; 0x0f
    22c0:	82 30       	cpi	r24, 0x02	; 2
    22c2:	d8 f4       	brcc	.+54     	; 0x22fa <HLCD_VoidGoToPos+0x54>
    22c4:	88 89       	ldd	r24, Y+16	; 0x10
    22c6:	80 31       	cpi	r24, 0x10	; 16
    22c8:	c0 f4       	brcc	.+48     	; 0x22fa <HLCD_VoidGoToPos+0x54>
   {
     switch(copy_u8RowNum)
    22ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    22cc:	28 2f       	mov	r18, r24
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	3a 8b       	std	Y+18, r19	; 0x12
    22d2:	29 8b       	std	Y+17, r18	; 0x11
    22d4:	89 89       	ldd	r24, Y+17	; 0x11
    22d6:	9a 89       	ldd	r25, Y+18	; 0x12
    22d8:	00 97       	sbiw	r24, 0x00	; 0
    22da:	31 f0       	breq	.+12     	; 0x22e8 <HLCD_VoidGoToPos+0x42>
    22dc:	29 89       	ldd	r18, Y+17	; 0x11
    22de:	3a 89       	ldd	r19, Y+18	; 0x12
    22e0:	21 30       	cpi	r18, 0x01	; 1
    22e2:	31 05       	cpc	r19, r1
    22e4:	31 f0       	breq	.+12     	; 0x22f2 <HLCD_VoidGoToPos+0x4c>
    22e6:	09 c0       	rjmp	.+18     	; 0x22fa <HLCD_VoidGoToPos+0x54>
     {
     case LCD_U8_ROW0 :
    	 HLCD_SendCommand(LCD_U8_ROW0_ADDRESS+copy_u8ColumnNo);
    22e8:	88 89       	ldd	r24, Y+16	; 0x10
    22ea:	80 58       	subi	r24, 0x80	; 128
    22ec:	0e 94 c4 0c 	call	0x1988	; 0x1988 <HLCD_SendCommand>
    22f0:	04 c0       	rjmp	.+8      	; 0x22fa <HLCD_VoidGoToPos+0x54>
    	 break;
     case LCD_U8_ROW1 :
         HLCD_SendCommand(LCD_U8_ROW1_ADDRESS+copy_u8ColumnNo);
    22f2:	88 89       	ldd	r24, Y+16	; 0x10
    22f4:	80 54       	subi	r24, 0x40	; 64
    22f6:	0e 94 c4 0c 	call	0x1988	; 0x1988 <HLCD_SendCommand>
    22fa:	80 e0       	ldi	r24, 0x00	; 0
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	a0 e8       	ldi	r26, 0x80	; 128
    2300:	bf e3       	ldi	r27, 0x3F	; 63
    2302:	8b 87       	std	Y+11, r24	; 0x0b
    2304:	9c 87       	std	Y+12, r25	; 0x0c
    2306:	ad 87       	std	Y+13, r26	; 0x0d
    2308:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230a:	6b 85       	ldd	r22, Y+11	; 0x0b
    230c:	7c 85       	ldd	r23, Y+12	; 0x0c
    230e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2310:	9e 85       	ldd	r25, Y+14	; 0x0e
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	4a ef       	ldi	r20, 0xFA	; 250
    2318:	54 e4       	ldi	r21, 0x44	; 68
    231a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	8f 83       	std	Y+7, r24	; 0x07
    2324:	98 87       	std	Y+8, r25	; 0x08
    2326:	a9 87       	std	Y+9, r26	; 0x09
    2328:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    232a:	6f 81       	ldd	r22, Y+7	; 0x07
    232c:	78 85       	ldd	r23, Y+8	; 0x08
    232e:	89 85       	ldd	r24, Y+9	; 0x09
    2330:	9a 85       	ldd	r25, Y+10	; 0x0a
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	40 e8       	ldi	r20, 0x80	; 128
    2338:	5f e3       	ldi	r21, 0x3F	; 63
    233a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    233e:	88 23       	and	r24, r24
    2340:	2c f4       	brge	.+10     	; 0x234c <HLCD_VoidGoToPos+0xa6>
		__ticks = 1;
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	9e 83       	std	Y+6, r25	; 0x06
    2348:	8d 83       	std	Y+5, r24	; 0x05
    234a:	3f c0       	rjmp	.+126    	; 0x23ca <HLCD_VoidGoToPos+0x124>
	else if (__tmp > 65535)
    234c:	6f 81       	ldd	r22, Y+7	; 0x07
    234e:	78 85       	ldd	r23, Y+8	; 0x08
    2350:	89 85       	ldd	r24, Y+9	; 0x09
    2352:	9a 85       	ldd	r25, Y+10	; 0x0a
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	3f ef       	ldi	r19, 0xFF	; 255
    2358:	4f e7       	ldi	r20, 0x7F	; 127
    235a:	57 e4       	ldi	r21, 0x47	; 71
    235c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2360:	18 16       	cp	r1, r24
    2362:	4c f5       	brge	.+82     	; 0x23b6 <HLCD_VoidGoToPos+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2364:	6b 85       	ldd	r22, Y+11	; 0x0b
    2366:	7c 85       	ldd	r23, Y+12	; 0x0c
    2368:	8d 85       	ldd	r24, Y+13	; 0x0d
    236a:	9e 85       	ldd	r25, Y+14	; 0x0e
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	40 e2       	ldi	r20, 0x20	; 32
    2372:	51 e4       	ldi	r21, 0x41	; 65
    2374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	bc 01       	movw	r22, r24
    237e:	cd 01       	movw	r24, r26
    2380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	9e 83       	std	Y+6, r25	; 0x06
    238a:	8d 83       	std	Y+5, r24	; 0x05
    238c:	0f c0       	rjmp	.+30     	; 0x23ac <HLCD_VoidGoToPos+0x106>
    238e:	88 ec       	ldi	r24, 0xC8	; 200
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	9c 83       	std	Y+4, r25	; 0x04
    2394:	8b 83       	std	Y+3, r24	; 0x03
    2396:	8b 81       	ldd	r24, Y+3	; 0x03
    2398:	9c 81       	ldd	r25, Y+4	; 0x04
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	f1 f7       	brne	.-4      	; 0x239a <HLCD_VoidGoToPos+0xf4>
    239e:	9c 83       	std	Y+4, r25	; 0x04
    23a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a2:	8d 81       	ldd	r24, Y+5	; 0x05
    23a4:	9e 81       	ldd	r25, Y+6	; 0x06
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	9e 83       	std	Y+6, r25	; 0x06
    23aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ac:	8d 81       	ldd	r24, Y+5	; 0x05
    23ae:	9e 81       	ldd	r25, Y+6	; 0x06
    23b0:	00 97       	sbiw	r24, 0x00	; 0
    23b2:	69 f7       	brne	.-38     	; 0x238e <HLCD_VoidGoToPos+0xe8>
    23b4:	14 c0       	rjmp	.+40     	; 0x23de <HLCD_VoidGoToPos+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b6:	6f 81       	ldd	r22, Y+7	; 0x07
    23b8:	78 85       	ldd	r23, Y+8	; 0x08
    23ba:	89 85       	ldd	r24, Y+9	; 0x09
    23bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	9e 83       	std	Y+6, r25	; 0x06
    23c8:	8d 83       	std	Y+5, r24	; 0x05
    23ca:	8d 81       	ldd	r24, Y+5	; 0x05
    23cc:	9e 81       	ldd	r25, Y+6	; 0x06
    23ce:	9a 83       	std	Y+2, r25	; 0x02
    23d0:	89 83       	std	Y+1, r24	; 0x01
    23d2:	89 81       	ldd	r24, Y+1	; 0x01
    23d4:	9a 81       	ldd	r25, Y+2	; 0x02
    23d6:	01 97       	sbiw	r24, 0x01	; 1
    23d8:	f1 f7       	brne	.-4      	; 0x23d6 <HLCD_VoidGoToPos+0x130>
    23da:	9a 83       	std	Y+2, r25	; 0x02
    23dc:	89 83       	std	Y+1, r24	; 0x01
         break;
     }
   }
   /* wait for more 39 usec */
   	_delay_ms(1);
}
    23de:	62 96       	adiw	r28, 0x12	; 18
    23e0:	0f b6       	in	r0, 0x3f	; 63
    23e2:	f8 94       	cli
    23e4:	de bf       	out	0x3e, r29	; 62
    23e6:	0f be       	out	0x3f, r0	; 63
    23e8:	cd bf       	out	0x3d, r28	; 61
    23ea:	cf 91       	pop	r28
    23ec:	df 91       	pop	r29
    23ee:	08 95       	ret

000023f0 <HLCD_VoidSendSpecialCharacter>:


void HLCD_VoidSendSpecialCharacter(u8 *copy_pu8CharArr,u8 copy_u8PatternNum,
								   u8 copy_u8RowNum, u8 copy_ColNum)
{
    23f0:	df 93       	push	r29
    23f2:	cf 93       	push	r28
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
    23f8:	27 97       	sbiw	r28, 0x07	; 7
    23fa:	0f b6       	in	r0, 0x3f	; 63
    23fc:	f8 94       	cli
    23fe:	de bf       	out	0x3e, r29	; 62
    2400:	0f be       	out	0x3f, r0	; 63
    2402:	cd bf       	out	0x3d, r28	; 61
    2404:	9c 83       	std	Y+4, r25	; 0x04
    2406:	8b 83       	std	Y+3, r24	; 0x03
    2408:	6d 83       	std	Y+5, r22	; 0x05
    240a:	4e 83       	std	Y+6, r20	; 0x06
    240c:	2f 83       	std	Y+7, r18	; 0x07
	u8 local_u8CGRAMAddress, local_u8Counter;
	/* Calculate CGRAM Address = Pattern Number * 8 */
	local_u8CGRAMAddress = copy_u8PatternNum * 8;
    240e:	8d 81       	ldd	r24, Y+5	; 0x05
    2410:	88 2f       	mov	r24, r24
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	88 0f       	add	r24, r24
    2416:	99 1f       	adc	r25, r25
    2418:	88 0f       	add	r24, r24
    241a:	99 1f       	adc	r25, r25
    241c:	88 0f       	add	r24, r24
    241e:	99 1f       	adc	r25, r25
    2420:	8a 83       	std	Y+2, r24	; 0x02
	SET_BIT(local_u8CGRAMAddress,6);
    2422:	8a 81       	ldd	r24, Y+2	; 0x02
    2424:	80 64       	ori	r24, 0x40	; 64
    2426:	8a 83       	std	Y+2, r24	; 0x02
	/* Send Command to set CGRAM Address */
	HLCD_SendCommand(local_u8CGRAMAddress);
    2428:	8a 81       	ldd	r24, Y+2	; 0x02
    242a:	0e 94 c4 0c 	call	0x1988	; 0x1988 <HLCD_SendCommand>

	for (local_u8Counter=0; local_u8Counter < 8; local_u8Counter++)
    242e:	19 82       	std	Y+1, r1	; 0x01
    2430:	0e c0       	rjmp	.+28     	; 0x244e <HLCD_VoidSendSpecialCharacter+0x5e>
	{
		/* Send byte from character array */
		HLCD_VoidSendData(copy_pu8CharArr[local_u8Counter]);
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	28 2f       	mov	r18, r24
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	8b 81       	ldd	r24, Y+3	; 0x03
    243a:	9c 81       	ldd	r25, Y+4	; 0x04
    243c:	fc 01       	movw	r30, r24
    243e:	e2 0f       	add	r30, r18
    2440:	f3 1f       	adc	r31, r19
    2442:	80 81       	ld	r24, Z
    2444:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <HLCD_VoidSendData>
	local_u8CGRAMAddress = copy_u8PatternNum * 8;
	SET_BIT(local_u8CGRAMAddress,6);
	/* Send Command to set CGRAM Address */
	HLCD_SendCommand(local_u8CGRAMAddress);

	for (local_u8Counter=0; local_u8Counter < 8; local_u8Counter++)
    2448:	89 81       	ldd	r24, Y+1	; 0x01
    244a:	8f 5f       	subi	r24, 0xFF	; 255
    244c:	89 83       	std	Y+1, r24	; 0x01
    244e:	89 81       	ldd	r24, Y+1	; 0x01
    2450:	88 30       	cpi	r24, 0x08	; 8
    2452:	78 f3       	brcs	.-34     	; 0x2432 <HLCD_VoidSendSpecialCharacter+0x42>
	{
		/* Send byte from character array */
		HLCD_VoidSendData(copy_pu8CharArr[local_u8Counter]);
	}
	/* Send Command to set DDRAM Address */
	HLCD_VoidGoToPos(copy_u8RowNum,copy_ColNum);
    2454:	8e 81       	ldd	r24, Y+6	; 0x06
    2456:	6f 81       	ldd	r22, Y+7	; 0x07
    2458:	0e 94 53 11 	call	0x22a6	; 0x22a6 <HLCD_VoidGoToPos>
	/* Display pattern from CGRAM */
	HLCD_VoidSendData(copy_u8PatternNum);
    245c:	8d 81       	ldd	r24, Y+5	; 0x05
    245e:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <HLCD_VoidSendData>
}
    2462:	27 96       	adiw	r28, 0x07	; 7
    2464:	0f b6       	in	r0, 0x3f	; 63
    2466:	f8 94       	cli
    2468:	de bf       	out	0x3e, r29	; 62
    246a:	0f be       	out	0x3f, r0	; 63
    246c:	cd bf       	out	0x3d, r28	; 61
    246e:	cf 91       	pop	r28
    2470:	df 91       	pop	r29
    2472:	08 95       	ret

00002474 <__vector_11>:
static PF global_PF_CTC=NULL ;


void __vector_11(void)	__attribute__((signal));
void __vector_11(void)
{
    2474:	1f 92       	push	r1
    2476:	0f 92       	push	r0
    2478:	0f b6       	in	r0, 0x3f	; 63
    247a:	0f 92       	push	r0
    247c:	11 24       	eor	r1, r1
    247e:	2f 93       	push	r18
    2480:	3f 93       	push	r19
    2482:	4f 93       	push	r20
    2484:	5f 93       	push	r21
    2486:	6f 93       	push	r22
    2488:	7f 93       	push	r23
    248a:	8f 93       	push	r24
    248c:	9f 93       	push	r25
    248e:	af 93       	push	r26
    2490:	bf 93       	push	r27
    2492:	ef 93       	push	r30
    2494:	ff 93       	push	r31
    2496:	df 93       	push	r29
    2498:	cf 93       	push	r28
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u8Counter =0;
		local_u8Counter++;
    249e:	80 91 99 01 	lds	r24, 0x0199
    24a2:	90 91 9a 01 	lds	r25, 0x019A
    24a6:	01 96       	adiw	r24, 0x01	; 1
    24a8:	90 93 9a 01 	sts	0x019A, r25
    24ac:	80 93 99 01 	sts	0x0199, r24
		if(local_u8Counter==3097)
    24b0:	80 91 99 01 	lds	r24, 0x0199
    24b4:	90 91 9a 01 	lds	r25, 0x019A
    24b8:	2c e0       	ldi	r18, 0x0C	; 12
    24ba:	89 31       	cpi	r24, 0x19	; 25
    24bc:	92 07       	cpc	r25, r18
    24be:	99 f4       	brne	.+38     	; 0x24e6 <__vector_11+0x72>
		{
			TIMER0_u8_TCNT0=TIMERS_u8_PRELOAD_VALUE;
    24c0:	e2 e5       	ldi	r30, 0x52	; 82
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	80 ec       	ldi	r24, 0xC0	; 192
    24c6:	80 83       	st	Z, r24
			local_u8Counter=0;
    24c8:	10 92 9a 01 	sts	0x019A, r1
    24cc:	10 92 99 01 	sts	0x0199, r1
			if (global_PF_NORMAL!=NULL)
    24d0:	80 91 95 01 	lds	r24, 0x0195
    24d4:	90 91 96 01 	lds	r25, 0x0196
    24d8:	00 97       	sbiw	r24, 0x00	; 0
    24da:	29 f0       	breq	.+10     	; 0x24e6 <__vector_11+0x72>
			{
				global_PF_NORMAL();
    24dc:	e0 91 95 01 	lds	r30, 0x0195
    24e0:	f0 91 96 01 	lds	r31, 0x0196
    24e4:	09 95       	icall
			}
		}
}
    24e6:	cf 91       	pop	r28
    24e8:	df 91       	pop	r29
    24ea:	ff 91       	pop	r31
    24ec:	ef 91       	pop	r30
    24ee:	bf 91       	pop	r27
    24f0:	af 91       	pop	r26
    24f2:	9f 91       	pop	r25
    24f4:	8f 91       	pop	r24
    24f6:	7f 91       	pop	r23
    24f8:	6f 91       	pop	r22
    24fa:	5f 91       	pop	r21
    24fc:	4f 91       	pop	r20
    24fe:	3f 91       	pop	r19
    2500:	2f 91       	pop	r18
    2502:	0f 90       	pop	r0
    2504:	0f be       	out	0x3f, r0	; 63
    2506:	0f 90       	pop	r0
    2508:	1f 90       	pop	r1
    250a:	18 95       	reti

0000250c <__vector_10>:
void __vector_10(void)	__attribute__((signal));
void __vector_10(void)
{
    250c:	1f 92       	push	r1
    250e:	0f 92       	push	r0
    2510:	0f b6       	in	r0, 0x3f	; 63
    2512:	0f 92       	push	r0
    2514:	11 24       	eor	r1, r1
    2516:	2f 93       	push	r18
    2518:	3f 93       	push	r19
    251a:	4f 93       	push	r20
    251c:	5f 93       	push	r21
    251e:	6f 93       	push	r22
    2520:	7f 93       	push	r23
    2522:	8f 93       	push	r24
    2524:	9f 93       	push	r25
    2526:	af 93       	push	r26
    2528:	bf 93       	push	r27
    252a:	ef 93       	push	r30
    252c:	ff 93       	push	r31
    252e:	df 93       	push	r29
    2530:	cf 93       	push	r28
    2532:	cd b7       	in	r28, 0x3d	; 61
    2534:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u8Counter =0;
			local_u8Counter++;
    2536:	80 91 9b 01 	lds	r24, 0x019B
    253a:	90 91 9c 01 	lds	r25, 0x019C
    253e:	01 96       	adiw	r24, 0x01	; 1
    2540:	90 93 9c 01 	sts	0x019C, r25
    2544:	80 93 9b 01 	sts	0x019B, r24
			if(local_u8Counter==10000)
    2548:	80 91 9b 01 	lds	r24, 0x019B
    254c:	90 91 9c 01 	lds	r25, 0x019C
    2550:	27 e2       	ldi	r18, 0x27	; 39
    2552:	80 31       	cpi	r24, 0x10	; 16
    2554:	92 07       	cpc	r25, r18
    2556:	79 f4       	brne	.+30     	; 0x2576 <__vector_10+0x6a>
			{
				local_u8Counter=0;
    2558:	10 92 9c 01 	sts	0x019C, r1
    255c:	10 92 9b 01 	sts	0x019B, r1
				if (global_PF_CTC!=NULL)
    2560:	80 91 97 01 	lds	r24, 0x0197
    2564:	90 91 98 01 	lds	r25, 0x0198
    2568:	00 97       	sbiw	r24, 0x00	; 0
    256a:	29 f0       	breq	.+10     	; 0x2576 <__vector_10+0x6a>
				{
					global_PF_CTC();
    256c:	e0 91 97 01 	lds	r30, 0x0197
    2570:	f0 91 98 01 	lds	r31, 0x0198
    2574:	09 95       	icall
				}
			}
}
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	ff 91       	pop	r31
    257c:	ef 91       	pop	r30
    257e:	bf 91       	pop	r27
    2580:	af 91       	pop	r26
    2582:	9f 91       	pop	r25
    2584:	8f 91       	pop	r24
    2586:	7f 91       	pop	r23
    2588:	6f 91       	pop	r22
    258a:	5f 91       	pop	r21
    258c:	4f 91       	pop	r20
    258e:	3f 91       	pop	r19
    2590:	2f 91       	pop	r18
    2592:	0f 90       	pop	r0
    2594:	0f be       	out	0x3f, r0	; 63
    2596:	0f 90       	pop	r0
    2598:	1f 90       	pop	r1
    259a:	18 95       	reti

0000259c <MTIMERS_voidTimer0Init>:
void MTIMERS_voidTimer0Init(void)
{
    259c:	df 93       	push	r29
    259e:	cf 93       	push	r28
    25a0:	cd b7       	in	r28, 0x3d	; 61
    25a2:	de b7       	in	r29, 0x3e	; 62
    		#endif
  TIMER0_u8_TCNT0=TIMERS_u8_PRELOAD_VALUE;

  #elif (TIMER_u8_MODE == TIMER_u8_CTC_MODE)

    	  SET_BIT(TIMER0_u8_TCCR0,TCCR0_u8_WGM01_PIN3);
    25a4:	a3 e5       	ldi	r26, 0x53	; 83
    25a6:	b0 e0       	ldi	r27, 0x00	; 0
    25a8:	e3 e5       	ldi	r30, 0x53	; 83
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	80 81       	ld	r24, Z
    25ae:	88 60       	ori	r24, 0x08	; 8
    25b0:	8c 93       	st	X, r24
    	  CLR_BIT(TIMER0_u8_TCCR0,TCCR0_u8_WGM00_PIN6);
    25b2:	a3 e5       	ldi	r26, 0x53	; 83
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	e3 e5       	ldi	r30, 0x53	; 83
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	8f 7b       	andi	r24, 0xBF	; 191
    25be:	8c 93       	st	X, r24

			#if(TIMER_u8_CTC_INTERRUPT == ENABLE)
    	  	  /*Timer/Counter0 Overflow Interrupt Enable*/
    	  	  SET_BIT(TIMER0_u8_TIMSK,TIMSK_u8_OCIE0_PIN1);
    25c0:	a9 e5       	ldi	r26, 0x59	; 89
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	e9 e5       	ldi	r30, 0x59	; 89
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	82 60       	ori	r24, 0x02	; 2
    25cc:	8c 93       	st	X, r24
    		#else
    	  	  /*Timer/Counter0 Overflow Interrupt Disable*/
    	  	  CLR_BIT(TIMER0_u8_TIMSK,TIMSK_u8_OCIE0_PIN1);
    		#endif
 TIMER0_u8_OCR0= TIMERS_u8_OCR0_VALUE;
    25ce:	ec e5       	ldi	r30, 0x5C	; 92
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	83 e6       	ldi	r24, 0x63	; 99
    25d4:	80 83       	st	Z, r24

  #endif

  TIMER0_u8_TCCR0 &=TIMERS_u8_TCCR0_PRESCALER_MASK;
    25d6:	a3 e5       	ldi	r26, 0x53	; 83
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	e3 e5       	ldi	r30, 0x53	; 83
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
    25e0:	88 7f       	andi	r24, 0xF8	; 248
    25e2:	8c 93       	st	X, r24
  TIMER0_u8_TCCR0 |= TIMERS_u8_PRESCALER_VALUE;
    25e4:	a3 e5       	ldi	r26, 0x53	; 83
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	e3 e5       	ldi	r30, 0x53	; 83
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	80 81       	ld	r24, Z
    25ee:	82 60       	ori	r24, 0x02	; 2
    25f0:	8c 93       	st	X, r24
  /*    CLR_BIT(TIMER0_u8_TCCR0,TCCR0_u8_COM00_PIN4);
      CLR_BIT(TIMER0_u8_TCCR0,TCCR0_u8_COM01_PIN5);
*/
     /*Select 1024 Prescaler */

}
    25f2:	cf 91       	pop	r28
    25f4:	df 91       	pop	r29
    25f6:	08 95       	ret

000025f8 <MTIMERS_voidTimer0OVFSetCallBack>:

void MTIMERS_voidTimer0OVFSetCallBack(void(*copy_pf)(void))
{
    25f8:	df 93       	push	r29
    25fa:	cf 93       	push	r28
    25fc:	00 d0       	rcall	.+0      	; 0x25fe <MTIMERS_voidTimer0OVFSetCallBack+0x6>
    25fe:	cd b7       	in	r28, 0x3d	; 61
    2600:	de b7       	in	r29, 0x3e	; 62
    2602:	9a 83       	std	Y+2, r25	; 0x02
    2604:	89 83       	std	Y+1, r24	; 0x01
	global_PF_NORMAL=copy_pf;
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	9a 81       	ldd	r25, Y+2	; 0x02
    260a:	90 93 96 01 	sts	0x0196, r25
    260e:	80 93 95 01 	sts	0x0195, r24
}
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	cf 91       	pop	r28
    2618:	df 91       	pop	r29
    261a:	08 95       	ret

0000261c <MTIMERS_voidTimer0CTCSetCallBack>:
void MTIMERS_voidTimer0CTCSetCallBack(void(*copy_pf)(void))
{
    261c:	df 93       	push	r29
    261e:	cf 93       	push	r28
    2620:	00 d0       	rcall	.+0      	; 0x2622 <MTIMERS_voidTimer0CTCSetCallBack+0x6>
    2622:	cd b7       	in	r28, 0x3d	; 61
    2624:	de b7       	in	r29, 0x3e	; 62
    2626:	9a 83       	std	Y+2, r25	; 0x02
    2628:	89 83       	std	Y+1, r24	; 0x01
	global_PF_CTC=copy_pf;
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	9a 81       	ldd	r25, Y+2	; 0x02
    262e:	90 93 98 01 	sts	0x0198, r25
    2632:	80 93 97 01 	sts	0x0197, r24
}
    2636:	0f 90       	pop	r0
    2638:	0f 90       	pop	r0
    263a:	cf 91       	pop	r28
    263c:	df 91       	pop	r29
    263e:	08 95       	ret

00002640 <__mulsi3>:
    2640:	62 9f       	mul	r22, r18
    2642:	d0 01       	movw	r26, r0
    2644:	73 9f       	mul	r23, r19
    2646:	f0 01       	movw	r30, r0
    2648:	82 9f       	mul	r24, r18
    264a:	e0 0d       	add	r30, r0
    264c:	f1 1d       	adc	r31, r1
    264e:	64 9f       	mul	r22, r20
    2650:	e0 0d       	add	r30, r0
    2652:	f1 1d       	adc	r31, r1
    2654:	92 9f       	mul	r25, r18
    2656:	f0 0d       	add	r31, r0
    2658:	83 9f       	mul	r24, r19
    265a:	f0 0d       	add	r31, r0
    265c:	74 9f       	mul	r23, r20
    265e:	f0 0d       	add	r31, r0
    2660:	65 9f       	mul	r22, r21
    2662:	f0 0d       	add	r31, r0
    2664:	99 27       	eor	r25, r25
    2666:	72 9f       	mul	r23, r18
    2668:	b0 0d       	add	r27, r0
    266a:	e1 1d       	adc	r30, r1
    266c:	f9 1f       	adc	r31, r25
    266e:	63 9f       	mul	r22, r19
    2670:	b0 0d       	add	r27, r0
    2672:	e1 1d       	adc	r30, r1
    2674:	f9 1f       	adc	r31, r25
    2676:	bd 01       	movw	r22, r26
    2678:	cf 01       	movw	r24, r30
    267a:	11 24       	eor	r1, r1
    267c:	08 95       	ret

0000267e <__udivmodsi4>:
    267e:	a1 e2       	ldi	r26, 0x21	; 33
    2680:	1a 2e       	mov	r1, r26
    2682:	aa 1b       	sub	r26, r26
    2684:	bb 1b       	sub	r27, r27
    2686:	fd 01       	movw	r30, r26
    2688:	0d c0       	rjmp	.+26     	; 0x26a4 <__udivmodsi4_ep>

0000268a <__udivmodsi4_loop>:
    268a:	aa 1f       	adc	r26, r26
    268c:	bb 1f       	adc	r27, r27
    268e:	ee 1f       	adc	r30, r30
    2690:	ff 1f       	adc	r31, r31
    2692:	a2 17       	cp	r26, r18
    2694:	b3 07       	cpc	r27, r19
    2696:	e4 07       	cpc	r30, r20
    2698:	f5 07       	cpc	r31, r21
    269a:	20 f0       	brcs	.+8      	; 0x26a4 <__udivmodsi4_ep>
    269c:	a2 1b       	sub	r26, r18
    269e:	b3 0b       	sbc	r27, r19
    26a0:	e4 0b       	sbc	r30, r20
    26a2:	f5 0b       	sbc	r31, r21

000026a4 <__udivmodsi4_ep>:
    26a4:	66 1f       	adc	r22, r22
    26a6:	77 1f       	adc	r23, r23
    26a8:	88 1f       	adc	r24, r24
    26aa:	99 1f       	adc	r25, r25
    26ac:	1a 94       	dec	r1
    26ae:	69 f7       	brne	.-38     	; 0x268a <__udivmodsi4_loop>
    26b0:	60 95       	com	r22
    26b2:	70 95       	com	r23
    26b4:	80 95       	com	r24
    26b6:	90 95       	com	r25
    26b8:	9b 01       	movw	r18, r22
    26ba:	ac 01       	movw	r20, r24
    26bc:	bd 01       	movw	r22, r26
    26be:	cf 01       	movw	r24, r30
    26c0:	08 95       	ret

000026c2 <__prologue_saves__>:
    26c2:	2f 92       	push	r2
    26c4:	3f 92       	push	r3
    26c6:	4f 92       	push	r4
    26c8:	5f 92       	push	r5
    26ca:	6f 92       	push	r6
    26cc:	7f 92       	push	r7
    26ce:	8f 92       	push	r8
    26d0:	9f 92       	push	r9
    26d2:	af 92       	push	r10
    26d4:	bf 92       	push	r11
    26d6:	cf 92       	push	r12
    26d8:	df 92       	push	r13
    26da:	ef 92       	push	r14
    26dc:	ff 92       	push	r15
    26de:	0f 93       	push	r16
    26e0:	1f 93       	push	r17
    26e2:	cf 93       	push	r28
    26e4:	df 93       	push	r29
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
    26ea:	ca 1b       	sub	r28, r26
    26ec:	db 0b       	sbc	r29, r27
    26ee:	0f b6       	in	r0, 0x3f	; 63
    26f0:	f8 94       	cli
    26f2:	de bf       	out	0x3e, r29	; 62
    26f4:	0f be       	out	0x3f, r0	; 63
    26f6:	cd bf       	out	0x3d, r28	; 61
    26f8:	09 94       	ijmp

000026fa <__epilogue_restores__>:
    26fa:	2a 88       	ldd	r2, Y+18	; 0x12
    26fc:	39 88       	ldd	r3, Y+17	; 0x11
    26fe:	48 88       	ldd	r4, Y+16	; 0x10
    2700:	5f 84       	ldd	r5, Y+15	; 0x0f
    2702:	6e 84       	ldd	r6, Y+14	; 0x0e
    2704:	7d 84       	ldd	r7, Y+13	; 0x0d
    2706:	8c 84       	ldd	r8, Y+12	; 0x0c
    2708:	9b 84       	ldd	r9, Y+11	; 0x0b
    270a:	aa 84       	ldd	r10, Y+10	; 0x0a
    270c:	b9 84       	ldd	r11, Y+9	; 0x09
    270e:	c8 84       	ldd	r12, Y+8	; 0x08
    2710:	df 80       	ldd	r13, Y+7	; 0x07
    2712:	ee 80       	ldd	r14, Y+6	; 0x06
    2714:	fd 80       	ldd	r15, Y+5	; 0x05
    2716:	0c 81       	ldd	r16, Y+4	; 0x04
    2718:	1b 81       	ldd	r17, Y+3	; 0x03
    271a:	aa 81       	ldd	r26, Y+2	; 0x02
    271c:	b9 81       	ldd	r27, Y+1	; 0x01
    271e:	ce 0f       	add	r28, r30
    2720:	d1 1d       	adc	r29, r1
    2722:	0f b6       	in	r0, 0x3f	; 63
    2724:	f8 94       	cli
    2726:	de bf       	out	0x3e, r29	; 62
    2728:	0f be       	out	0x3f, r0	; 63
    272a:	cd bf       	out	0x3d, r28	; 61
    272c:	ed 01       	movw	r28, r26
    272e:	08 95       	ret

00002730 <_exit>:
    2730:	f8 94       	cli

00002732 <__stop_program>:
    2732:	ff cf       	rjmp	.-2      	; 0x2732 <__stop_program>
